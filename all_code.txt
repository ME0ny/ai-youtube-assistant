
=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\.gitignore ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\.gitignore ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\manifest.json ===

{
    "manifest_version": 3,
    "name": "YouTube –ø–æ–¥–±–æ—Ä –≤–∏–¥–µ–æ",
    "version": "1.0.0",
    "description": "–ù–æ–≤—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ YouTube. DEV-—Ä–µ–∂–∏–º.",
    "icons": {
        "16": "icons/icon16.png"
    },
    "action": {
        "default_popup": "popup/popup.html",
        "default_icon": {
            "16": "icons/icon16.png"
        }
    },
    "background": {
        "service_worker": "background/background.js",
        "type": "module"
    },
    "content_scripts": [
        {
            "matches": [
                "*://*.youtube.com/*"
            ],
            "js": [
                "content/modules/scroller.js",
                "content/modules/parser.js",
                "content/modules/scraper.js",
                "content/content.js"
            ],
            "run_at": "document_idle"
        }
    ],
    "permissions": [
        "activeTab",
        "scripting",
        "storage",
        "tabs"
    ],
    "host_permissions": [
        "*://*.youtube.com/*",
        "https://qwen-model-xrkk.onrender.com/*"
    ]
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\manifest.json ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\package-lock.json ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\package-lock.json ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\package.json ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\package.json ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\adapters\ChromeStorageLogAdapter.js ===

// adapters/ChromeStorageLogAdapter.js
import { Logger } from '../core/logger.js'; // –î–ª—è —Ç–∏–ø–æ–≤

/**
 * @typedef {import('../core/types/log.types.js').LogEntry} LogEntry
 * @typedef {import('../core/types/log.types.js').LogAdapter} LogAdapter
 */

export class ChromeStorageLogAdapter {
    /** @type {string} */
    #storageKey;
    /** @type {number} */
    #maxSize;

    /**
     * @param {Object} options
     * @param {string} [options.storageKey='appLogs']
     * @param {number} [options.maxSize=500]
     */
    constructor(options = {}) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å chrome.storage.local
        if (typeof chrome === 'undefined' || !chrome.storage || !chrome.storage.local) {
            throw new Error('ChromeStorageLogAdapter: chrome.storage.local is not available.');
        }

        this.#storageKey = options.storageKey ?? 'appLogs';
        this.#maxSize = options.maxSize ?? 500;
    }

    /**
     * @param {LogEntry} entry
     * @returns {Promise<void>}
     */
    async write(entry) {
        try {
            const logs = await this.read();
            logs.push(entry);
            if (logs.length > this.#maxSize) {
                logs.splice(0, logs.length - this.#maxSize);
            }
            await chrome.storage.local.set({ [this.#storageKey]: logs });
        } catch (e) {
            console.error("[ChromeStorageLogAdapter] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", e);
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –∞–¥–∞–ø—Ç–µ—Ä–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ
            // throw e;
        }
    }

    /**
     * @returns {Promise<LogEntry[]>}
     */
    async read() {
        try {
            const result = await chrome.storage.local.get([this.#storageKey]);
            return result[this.#storageKey] || [];
        } catch (e) {
            console.error("[ChromeStorageLogAdapter] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", e);
            return [];
        }
    }

    /**
     * @returns {Promise<void>}
     */
    async clear() {
        try {
            await chrome.storage.local.remove([this.#storageKey]);
        } catch (e) {
            console.error("[ChromeStorageLogAdapter] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", e);
        }
    }
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\adapters\ChromeStorageLogAdapter.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\adapters\ChromeStorageTableAdapter.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\adapters\ChromeStorageTableAdapter.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\adapters\ConsoleLogAdapter.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\adapters\ConsoleLogAdapter.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\ai-service.js ===

// ai/ai-service.js

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ GPT API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏.
 * @returns {Promise<string>} –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.
 */
export async function askGPT(prompt) {
    const response = await fetch('https://qwen-model-xrkk.onrender.com/ask', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer #O6m4W#$sana*rXqs&owLGU03VVg&HIDOHPH8UbYL%@iu02qmoS*9cu!%C@qZAZk'
        },
        body: JSON.stringify({ prompt })
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ API (${response.status}): ${errorText}`);
    }

    const result = await response.json(); // üëà –¢–µ–ø–µ—Ä—å –∂–¥—ë–º JSON
    return result.response; // üëà –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–µ response
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\ai-service.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\clip-generator.js ===

// ai/clip-generator.js

import { askGPT } from './ai-service.js';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ GPT –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—Ä–µ–∑–æ–∫.
 * @param {string} userQuery - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} fullTranscript - –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
 * @returns {Promise<string>} –û—Ç–≤–µ—Ç GPT.
 */
export async function getVideoClips(userQuery, fullTranscript) {
    const prompt = `You are a skilled video content curator tasked with identifying the three most compelling short segments (each up to 2 minutes long) from a single YouTube video that best justify why this video is worth watching. These segments should function like engaging Shorts, Reels, or TikToks‚Äîself-contained, captivating, and clearly understandable on their own. Each segment must have a natural beginning and end, and fall into one of these categories: (1) a clear answer to an interesting or surprising question, (2) a concise personal or illustrative story, or (3) a focused, dynamic debate or exchange of contrasting viewpoints.  

Use the user‚Äôs original query to understand their intent and interests, then analyze the full transcript to locate the most relevant, high-impact moments that align with that intent. For each of the three selected segments, provide only the start time (in MM:SS format), end time (in MM:SS format), and a short, catchy title in Russian that captures the essence of the fragment. Do not include any additional explanation, commentary, or formatting‚Äîjust the three entries, each on a new line, in the exact format:  
Start: MM:SS ‚Äì End: MM:SS | –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º  

Here is the input you will receive:  
[User Query]: ${userQuery}
[Full Transcript]: ${fullTranscript}
Return only the three formatted lines‚Äînothing else.`;

    return await askGPT(prompt);
}

/**
 * –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç GPT –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
 * @param {string} gptResponse - –û—Ç–≤–µ—Ç GPT.
 * @returns {Array<{ start: string, end: string, title: string }>}
 */
export function parseClips(gptResponse) {
    const lines = gptResponse.split('\n').filter(l => l.trim() !== '');
    const clips = [];

    for (const line of lines) {
        const match = line.match(/Start: (\d+:\d+) ‚Äì End: (\d+:\d+) \| (.+)/);
        if (match) {
            const [, start, end, title] = match;
            clips.push({ start, end, title });
        }
    }

    return clips;
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\clip-generator.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\content-generator.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\content-generator.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\gpt-evaluator.js ===

// ai/gpt-evaluator.js

import { askGPT } from './ai-service.js';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ GPT –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏.
 * @param {string} userQuery - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {object} video - –û–±—ä–µ–∫—Ç –≤–∏–¥–µ–æ { title, duration, initialScore, transcript }.
 * @returns {Promise<{ revisedScore: number, summary: string }>} –†–µ–∑—É–ª—å—Ç–∞—Ç.
 */
export async function evaluateVideo(userQuery, video) {
    // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    const firstChunk = video.transcript?.[0]?.chunk_text || '';

    const prompt = `You are an expert video analyst helping to refine video recommendations for a personalized YouTube viewing assistant. Your task is to evaluate a single video based on the user's original search intent, the video's title, duration, initial algorithmic score (from 1 to 10), and the first ~3,000 tokens of its transcript.

First, carefully consider the user's query to understand their current mood, interests, or viewing goals. Then, analyze the provided transcript excerpt to assess how well the video aligns with that intent‚Äîlooking at relevance, depth of content, engagement, clarity, and overall value. Based on this analysis, adjust the initial algorithmic score upward or downward (still on a 1‚Äì10 scale), providing a revised score that reflects both the original rating and your qualitative assessment.

If the revised score is 7 or higher, also generate a detailed, objective summary (3‚Äì5 sentences) describing what the video is actually about, based solely on the transcript. Focus on key topics, tone, structure, and any unique insights or value it offers. This summary will later be used to create a concise user-facing description. Summary on russian language

Do not compare this video to others‚Äîevaluate it in isolation. Do not mention the user‚Äôs query in the summary; keep the summary factual and content-focused.

Here is the input format you will receive for each video:
[User Query]:${userQuery}
[Video Title]: ${video.title}
[Duration]: ${video.duration}
[Initial Score]: ${video.initialScore}
[Transcript Excerpt]: ${firstChunk}

Respond strictly in the following format:
Revised Score: {revised_score}
Summary: {detailed_summary_if_score_7_or_higher, otherwise_write_"N/A"}
`;

    const response = await askGPT(prompt);

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    const lines = response.split('\n');
    let revisedScore = 0;
    let summary = 'N/A';

    for (const line of lines) {
        if (line.startsWith('Revised Score:')) {
            const num = parseFloat(line.replace('Revised Score:', '').trim());
            revisedScore = isNaN(num) ? 0 : num;
        }
        if (line.startsWith('Summary:')) {
            summary = line.replace('Summary:', '').trim();
        }
    }

    return { revisedScore, summary };
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\gpt-evaluator.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\transcription-service.js ===

// ai/transcription-service.js

const API_KEY = '68e161946f29331019306dcd'; // –í–∞—à API-–∫–ª—é—á
const API_URL = 'https://api.scrapingdog.com/youtube/transcripts';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ –ø–æ ID.
 * @param {string} videoId - ID –≤–∏–¥–µ–æ.
 * @returns {Promise<Object>} –û—Ç–≤–µ—Ç API.
 */
async function getTranscript(videoId) {
    const response = await fetch(`${API_URL}?v=${videoId}&api_key=${API_KEY}`);
    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ API (${response.status}): ${errorText}`);
    }
    return await response.json();
}

// --- –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ ---
function isSentenceEnd(text) {
    if (!text) return true;
    const trimmed = text.trim();
    if (trimmed === '') return true;
    const lastChar = trimmed.slice(-1);
    return '.!?'.includes(lastChar);
}

function findFirstSentenceEnd(text) {
    const match = /[.!?]/.exec(text);
    return match ? match.index + 1 : -1;
}

function secondsToHMS(seconds) {
    const h = Math.floor(seconds / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = Math.floor(seconds % 60);
    return [h, m, s].map(v => v.toString().padStart(2, '0')).join(':');
}

function mergeBySentenceBoundaries(transcripts) {
    if (transcripts.length === 0) return [];

    const blocks = [];
    let currentText = transcripts[0].text;
    let currentStart = transcripts[0].start;

    for (let i = 1; i < transcripts.length; i++) {
        const next = transcripts[i];

        if (!isSentenceEnd(currentText)) {
            const pos = findFirstSentenceEnd(next.text);

            if (pos === -1) {
                currentText += ' ' + next.text;
            } else {
                const toAppend = next.text.slice(0, pos);
                const remainder = next.text.slice(pos).trim();

                currentText += ' ' + toAppend;
                blocks.push({ start: currentStart, text: currentText.trim() });

                currentText = remainder;
                currentStart = next.start;
            }
        } else {
            blocks.push({ start: currentStart, text: currentText.trim() });
            currentText = next.text;
            currentStart = next.start;
        }
    }

    if (currentText.trim() !== '') {
        blocks.push({ start: currentStart, text: currentText.trim() });
    }

    return blocks;
}

function estimateTokens(text) {
    return Math.ceil((text?.length || 0) / 2.7);
}

function splitIntoChunks(lines, maxTokens = 3000) { // 3000 –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
    const chunks = [];
    let current = [];
    let currentText = '';

    for (const line of lines) {
        const candidate = currentText === '' ? line : currentText + '\n' + line;
        if (estimateTokens(candidate) <= maxTokens) {
            currentText = candidate;
            current.push(line);
        } else {
            if (current.length === 0) {
                chunks.push([line]);
                currentText = '';
            } else {
                chunks.push([...current]);
                current = [line];
                currentText = line;
            }
        }
    }

    if (current.length > 0) chunks.push(current);
    return chunks;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∞–Ω–∫–æ–≤.
 * @param {Array} transcripts - –ú–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
 * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ (—á–∞–Ω–∫–∏).
 */
function processTranscript(transcripts) {
    const blocks = mergeBySentenceBoundaries(transcripts);
    const lines = blocks.map(item => {
        const timeStr = secondsToHMS(item.start);
        return `${timeStr}: ${item.text}`;
    });
    const chunks = splitIntoChunks(lines);
    return chunks.map(chunk => chunk.join('\n'));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –≤–∏–¥–µ–æ.
 * @param {string} videoId - ID –≤–∏–¥–µ–æ.
 * @returns {Promise<Array<string>>} –ú–∞—Å—Å–∏–≤ —á–∞–Ω–∫–æ–≤.
 */
export async function getProcessedTranscript(videoId) {
    const data = await getTranscript(videoId);
    if (!data.transcripts || !Array.isArray(data.transcripts)) {
        throw new Error(`–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–¥–µ–æ ${videoId}`);
    }
    return processTranscript(data.transcripts);
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\ai\transcription-service.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\background\background.js ===

// background/background.js

// 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Logger –∏ –∞–¥–∞–ø—Ç–µ—Ä
import { Logger } from '../core/logger.js';
import { ChromeStorageLogAdapter } from '../adapters/ChromeStorageLogAdapter.js';
import { ScenarioEngine } from '../core/scenario-engine.js';

import { scrollPageNTimes } from '../core/utils/scroller.js';
import { parseAllVideoCards } from '../core/utils/parser.js';
import { askGPT } from '../ai/ai-service.js';
import { getProcessedTranscript } from '../ai/transcription-service.js';
import { formatVideoListForGPT, buildTop10ByTitlePrompt, parseGPTTop10Response } from '../core/utils/ai-utils.js';
import { evaluateVideo } from '../ai/gpt-evaluator.js';
import { getVideoClips, parseClips } from '../ai/clip-generator.js';
import { aiVideoRecommendationScenario } from '../scenarios/ai-video-recommendation-scenario.js';

// 2. –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const logger = new Logger({
    maxSize: 1000,
    enableConsole: true,
    defaultLevel: 'info'
});

// 3. –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–≤–∏–∂–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
export const scenarioEngine = new ScenarioEngine();

scenarioEngine.registerScenario(aiVideoRecommendationScenario);
// 3. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ConsoleLogAdapter
// import { ConsoleLogAdapter } from '../adapters/ConsoleLogAdapter.js';
// logger.addAdapter(new ConsoleLogAdapter());

// 4. –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∑–∞–ø—É—Å–∫–∞ background
logger.info("üöÄ Background service worker –∑–∞–ø—É—â–µ–Ω.", { module: 'Background' });

// 5. –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup –∏ content
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤ –∏–∑ content-—Å–∫—Ä–∏–ø—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    if (request.type === "contentLog") {
        logger.log(
            request.message,
            request.level || 'info',
            {
                module: request.module || 'ContentScript',
            }
        );
        return false;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
    if (request.action === "clearLog") {
        logger.clear().then(() => {
            sendResponse({ status: "success" });
        });
        return true;
    }

    // background/background.js ‚Üí –≤–Ω—É—Ç—Ä–∏ chrome.runtime.onMessage.addListener

    if (request.action === "runScrollStep") {
        (async () => {
            try {
                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ content script ---
                try {
                    await chrome.tabs.sendMessage(tabId, { action: "ping" });
                } catch (pingErr) {
                    throw new Error("Content script –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É YouTube.");
                }

                // --- 4. –°–æ–∑–¥–∞—ë–º –ö–û–†–†–ï–ö–¢–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å AbortController ---
                const controller = new AbortController();
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'ScrollStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    // üëá –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è abortSignal
                    abortSignal: async () => {
                        if (controller.signal.aborted) {
                            throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
                        }
                        // –ï—Å–ª–∏ –Ω–µ aborted ‚Äî –ø—Ä–æ–º–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                        return Promise.resolve();
                    },
                    // üëá –ü–µ—Ä–µ–¥–∞—ë–º controller, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å controller.abort()
                    controller
                };

                await scrollPageNTimes(
                    tempContext,
                    request.params.count || 5,
                    request.params.delayMs || 1000,
                    request.params.step || 1000
                );

                sendResponse({ status: "success" });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ —Å–∫—Ä–æ–ª–ª–∞: ${errorMsg}`, { module: 'ScrollStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runParseVideosStep") {
        (async () => {
            try {
                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'ParseVideosStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    abortSignal: async () => { },
                    controller: { signal: { aborted: false } }
                };

                // --- 4. –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
                const response = await parseAllVideoCards(tempContext);

                if (response?.status === 'success') {
                    sendResponse({ status: "success", data: response.data });
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ parseAllVideoCards');
                }
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ: ${errorMsg}`, { module: 'ParseVideosStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runGPTGetTop10ByTitleStep") { // üëà –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è
        (async () => {
            try {
                const userQuery = request.params?.userQuery?.trim();
                if (!userQuery) {
                    throw new Error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                }

                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'GPTGetTop10ByTitleStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    abortSignal: async () => { },
                    controller: { signal: { aborted: false } }
                };

                // --- 4. –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é ---
                const parseResponse = await parseAllVideoCards(tempContext);

                if (parseResponse?.status !== 'success') {
                    throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ: ${parseResponse?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                }

                const videos = parseResponse.data;

                // --- 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ "–ù–∞–∑–≤–∞–Ω–∏–µ;–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É ---
                const videoList = formatVideoListForGPT(videos);

                if (!videoList) {
                    throw new Error("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏).");
                }

                // --- 6. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É ---
                const prompt = buildTop10ByTitlePrompt(userQuery, videoList);

                // --- 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API —á–µ—Ä–µ–∑ ai-service ---
                const gptResponse = await askGPT(prompt);

                // --- 8. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT ---
                const top10Results = parseGPTTop10Response(gptResponse, videos);

                logger.info(`‚úÖ –¢–æ–ø-10 –≤–∏–¥–µ–æ –æ—Ç GPT:`, { module: 'GPTGetTop10ByTitleStep', data: top10Results });

                sendResponse({ status: "success", data: top10Results });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-10 –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: ${errorMsg}`, { module: 'GPTGetTop10ByTitleStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runTranscriptionStep") {
        (async () => {
            try {
                const top10Json = request.params?.top10Json?.trim();
                if (!top10Json) {
                    throw new Error("–ü—É—Å—Ç–æ–π JSON —Å —Ç–æ–ø-10 –≤–∏–¥–µ–æ.");
                }

                let top10Data;
                try {
                    top10Data = JSON.parse(top10Json);
                } catch (e) {
                    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Å —Ç–æ–ø-10 –≤–∏–¥–µ–æ.");
                }

                if (!Array.isArray(top10Data)) {
                    throw new Error("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–∏–¥–µ–æ.");
                }

                logger.info(`üé¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è ${top10Data.length} –≤–∏–¥–µ–æ...`, { module: 'TranscriptionStep' });

                const results = [];

                for (const video of top10Data) {
                    const { title, videoId } = video;
                    if (!title || !videoId) {
                        logger.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–∏–¥–µ–æ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ ID: ${JSON.stringify(video)}`, { module: 'TranscriptionStep' });
                        continue;
                    }

                    logger.info(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è: "${title}" (ID: ${videoId})`, { module: 'TranscriptionStep' });

                    try {
                        const chunks = await getProcessedTranscript(videoId);
                        results.push({ title, chunks });
                        logger.success(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è "${title}" –≥–æ—Ç–æ–≤–∞ (${chunks.length} —á–∞–Ω–∫–æ–≤).`, { module: 'TranscriptionStep' });
                    } catch (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è "${title}": ${err.message}`, { module: 'TranscriptionStep' });
                    }
                }

                logger.success(`üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`, { module: 'TranscriptionStep' });

                sendResponse({ status: "success", results });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${errorMsg}`, { module: 'TranscriptionStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runGPTDeepEvalStep") {
        (async () => {
            try {
                const userQuery = request.params?.userQuery?.trim();
                if (!userQuery) {
                    throw new Error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                }

                const videoJson = request.params?.videoJson?.trim();
                if (!videoJson) {
                    throw new Error("–ü—É—Å—Ç–æ–π JSON —Å –≤–∏–¥–µ–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π.");
                }

                let videoData;
                try {
                    videoData = JSON.parse(videoJson);
                } catch (e) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.message}`, { module: 'GPTDeepEvalStep' });
                    logger.error(`üìã –í–≤–µ–¥—ë–Ω–Ω—ã–π JSON: ${videoJson.substring(0, 200)}...`, { module: 'GPTDeepEvalStep' }); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ
                    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: ${e.message}`);
                }

                if (!Array.isArray(videoData)) {
                    throw new Error("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–∏–¥–µ–æ.");
                }

                // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                for (let i = 0; i < videoData.length; i++) {
                    const video = videoData[i];
                    if (!video.title || !video.duration || video.initialScore == null || !video.videoId || !Array.isArray(video.transcript)) {
                        logger.error(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–¥–µ–æ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${i}: ${JSON.stringify(video)}`, { module: 'GPTDeepEvalStep' });
                        throw new Error(`–í–∏–¥–µ–æ ${i + 1} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è.`);
                    }
                }

                logger.info(`üîç –ù–∞—á–∏–Ω–∞–µ–º –≥–ª—É–±–æ–∫—É—é –æ—Ü–µ–Ω–∫—É ${videoData.length} –≤–∏–¥–µ–æ...`, { module: 'GPTDeepEvalStep' });

                const results = [];

                for (const video of videoData) {
                    const { title, duration, initialScore, transcript, videoId } = video;
                    logger.info(`üìù –û—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ: "${title}"`, { module: 'GPTDeepEvalStep' });

                    try {
                        const { revisedScore, summary } = await evaluateVideo(userQuery, video);

                        results.push({
                            title,
                            videoId,
                            revisedScore,
                            summary
                        });

                        logger.success(`‚úÖ –í–∏–¥–µ–æ "${title}" –æ—Ü–µ–Ω–µ–Ω–æ: ${revisedScore}`, { module: 'GPTDeepEvalStep' });
                    } catch (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è "${title}": ${err.message}`, { module: 'GPTDeepEvalStep' });
                    }
                }

                logger.success(`üéâ –ì–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`, { module: 'GPTDeepEvalStep' });

                sendResponse({ status: "success", results });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏: ${errorMsg}`, { module: 'GPTDeepEvalStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runClipGenerationStep") {
        (async () => {
            try {
                const { userQuery, transcriptJson, deepEvalJson } = request.params;

                if (!userQuery) {
                    throw new Error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                }
                if (!transcriptJson) {
                    throw new Error("–ü—É—Å—Ç–æ–π JSON —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π.");
                }
                if (!deepEvalJson) {
                    throw new Error("–ü—É—Å—Ç–æ–π JSON —Å –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π.");
                }

                let transcriptData, deepEvalData;
                try {
                    transcriptData = JSON.parse(transcriptJson);
                    deepEvalData = JSON.parse(deepEvalJson);
                } catch (e) {
                    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.");
                }

                if (!Array.isArray(transcriptData) || !Array.isArray(deepEvalData)) {
                    throw new Error("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤—ã.");
                }

                logger.info(`üìã –í—Å–µ–≥–æ –≤–∏–¥–µ–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π: ${transcriptData.length}`, { module: 'ClipGenerationStep' });
                logger.info(`üìã –í—Å–µ–≥–æ –≤–∏–¥–µ–æ —Å –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π: ${deepEvalData.length}`, { module: 'ClipGenerationStep' });

                // --- –í—ã–≤–æ–¥–∏–º videoID –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ ---
                const transcriptVideoIds = transcriptData.map(v => v.videoId);
                logger.info(`üìã videoID –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${transcriptVideoIds.join(', ')}`, { module: 'ClipGenerationStep' });

                // --- –í—ã–≤–æ–¥–∏–º videoID –∏–∑ –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏ ---
                const deepEvalVideoIds = deepEvalData.map(v => v[1]);
                logger.info(`üìã videoID –∏–∑ –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏: ${deepEvalVideoIds.join(', ')}`, { module: 'ClipGenerationStep' });

                // --- –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –±–µ—Ä—ë–º —Ç–æ–ø-3 –∏–∑ deepEvalJson ---
                const top3 = [...deepEvalData]
                    .sort((a, b) => b[2] - a[2]) // –ø–æ —Ç—Ä–µ—Ç—å–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É (–æ—Ü–µ–Ω–∫–µ)
                    .slice(0, 3);

                if (top3.length === 0) {
                    throw new Error("–ù–µ—Ç –≤–∏–¥–µ–æ —Å –æ—Ü–µ–Ω–∫–æ–π –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏.");
                }

                logger.info(`üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è ${top3.length} –≤–∏–¥–µ–æ...`, { module: 'ClipGenerationStep' });

                const results = [];

                for (const [title, videoId, score] of top3) {
                    logger.info(`üîç –ò—â–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –≤–∏–¥–µ–æ: ${videoId}`, { module: 'ClipGenerationStep' });

                    // --- –ò–©–ï–ú —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ transcriptData ---
                    const videoTranscript = transcriptData.find(v => v.videoId === videoId);

                    if (!videoTranscript) {
                        logger.warn(`‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ: ${videoId}`, { module: 'ClipGenerationStep' });
                        continue;
                    }

                    logger.success(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ: ${videoId}`, { module: 'ClipGenerationStep' });

                    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —á–∞–Ω–∫–æ–≤ 1, 3, 6 (0, 2, 5 –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö)
                    const chunksToUse = [0, 2, 5].map(i => videoTranscript.transcript[i]?.chunk_text).filter(Boolean);
                    const fullTranscript = chunksToUse.join(' ');

                    logger.info(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ: "${title}" (ID: ${videoId})`, { module: 'ClipGenerationStep' });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
                    const gptResponse = await getVideoClips(userQuery, fullTranscript);

                    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    const clips = parseClips(gptResponse);

                    results.push({
                        title,
                        videoId,
                        score,
                        clips
                    });

                    logger.success(`‚úÖ –ù–∞—Ä–µ–∑–∫–∏ –¥–ª—è "${title}" –≥–æ—Ç–æ–≤—ã (${clips.length} —à—Ç.).`, { module: 'ClipGenerationStep' });
                }

                logger.success(`üéâ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`, { module: 'ClipGenerationStep' });

                sendResponse({ status: "success", results });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ä–µ–∑–æ–∫: ${errorMsg}`, { module: 'ClipGenerationStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runScenario") {
        (async () => {
            // --- ‚úÖ –ò–ó–í–õ–ï–ö–ê–ï–ú scenarioId –ò–ó request ---
            const { scenarioId, params = {} } = request;

            logger.info(`üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioId}"`, { module: 'Background', meta: params });

            // --- ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú, –ö–ê–ö–û–ô –°–¶–ï–ù–ê–†–ò–ô –ó–ê–ü–£–°–ö–ê–¢–¨ ---
            let scenarioToRun;
            if (scenarioId === 'ai-video-recommendation') { // ‚úÖ –¢–µ–ø–µ—Ä—å scenarioId –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
                scenarioToRun = aiVideoRecommendationScenario;
            } else {
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioId}`); // ‚úÖ –¢–µ–ø–µ—Ä—å scenarioId –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            }

            // --- ‚úÖ –ü–û–õ–£–ß–ê–ï–ú tabId ---
            let activeTabId = null;
            logger.debug("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É...", { module: 'Background' });
            try {
                // –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
                const activeTabsCurrentWindow = await chrome.tabs.query({ active: true, currentWindow: true });
                logger.debug(`–†–µ–∑—É–ª—å—Ç–∞—Ç query({active: true, currentWindow: true}):`, activeTabsCurrentWindow, { module: 'Background' });
                if (activeTabsCurrentWindow.length > 0) {
                    activeTabId = activeTabsCurrentWindow[0].id;
                }
            } catch (queryErr1) {
                logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ 1 –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏: ${queryErr1.message}`, { module: 'Background' });
                // –ü–æ–ø—ã—Ç–∫–∞ 2: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ –ª—é–±–æ–º –æ–∫–Ω–µ
                try {
                    const activeTabsAnyWindow = await chrome.tabs.query({ active: true });
                    if (activeTabsAnyWindow.length > 0) {
                        activeTabId = activeTabsAnyWindow[0].id;
                    }
                } catch (queryErr2) {
                    logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ 2 –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏: ${queryErr2.message}`, { module: 'Background' });
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ null, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (—Å—Ü–µ–Ω–∞—Ä–∏–π –º–æ–∂–µ—Ç —Å–∞–º —Ä–µ—à–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å)
            if (activeTabId === null) {
                logger.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É. tabId –±—É–¥–µ—Ç null. –°—Ü–µ–Ω–∞—Ä–∏–π –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", { module: 'Background' });
            } else {
                logger.info(`‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: ID=${activeTabId}`, { module: 'Background' });
            }

            // --- ‚úÖ –ó–ê–ü–£–°–ö–ê–ï–ú –°–¶–ï–ù–ê–†–ò–ô ---
            // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ tabId –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ context.params –∏ context.tabId
            const instanceId = await scenarioEngine.run(scenarioToRun, params, activeTabId);

            logger.info(`üèÅ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioId}" –∑–∞–ø—É—â–µ–Ω —Å ID: ${instanceId}`, { module: 'Background' });
            sendResponse({ status: "started", instanceId: instanceId });

        })(); // –ö–æ–Ω–µ—Ü async —Ñ—É–Ω–∫—Ü–∏–∏
        return true; // keep channel open for async response
    }
    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –ø–æ –º–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
});

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\background\background.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\content\content.js ===

// content/content.js
// window.performScrollNTimes –¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–∞–∫ –∫–∞–∫ scroller.js –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω —Ä–∞–Ω—å—à–µ

console.log("[Content Script] –ó–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç background.js
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log("[Content Script] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", request);

    if (request.action === "performSingleScroll") {
        console.log("[Content Script] –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –û–î–ù–û–ì–û —Å–∫—Ä–æ–ª–ª–∞:", request);

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª, –≤—ã–∑—ã–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        window.performSingleScroll(request.step)
            .then(() => {
                console.log("[Content Script] –û–¥–∏–Ω —Å–∫—Ä–æ–ª–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
                sendResponse({ status: "success" });
            })
            .catch((err) => {
                console.error("[Content Script] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞:", err);
                sendResponse({ status: "error", message: err.message });
            });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
        return true;
    }

    if (request.action === "parseAllVideoCards") {
        console.log("[Content Script] –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ...");
        try {
            const data = window.ytParser.parseAllVideoCards();
            sendResponse({ status: "success", data });
            console.log("[Content Script] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ:", data.length);
        } catch (err) {
            console.error("[Content Script] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", err);
            sendResponse({ status: "error", message: err.message });
        }
        return true;
    }

    console.log("[Content Script] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.");
});

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\content\content.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\content\modules\parser.js ===

// content/modules/parser.js


/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–∞ MM:SS –∏–ª–∏ HH:MM:SS –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM:SS.
 * @param {string} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS –∏–ª–∏ HH:MM:SS.
 * @returns {string} –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS –∏–ª–∏ '‚Äî', –µ—Å–ª–∏ –æ—à–∏–±–∫–∞.
 */
function formatDurationToHHMMSS(duration) {
    if (!duration || duration === '‚Äî') return '‚Äî';

    const parts = duration.split(':').map(Number).reverse();
    if (parts.length < 2 || parts.some(isNaN)) return '‚Äî';

    const seconds = parts[0] || 0;
    const minutes = parts[1] || 0;
    const hours = parts[2] || 0;

    // –ï—Å–ª–∏ 3 —á–∞—Å—Ç–∏ ‚Äî —É–∂–µ HH:MM:SS
    if (parts.length === 3) return duration;

    // –ï—Å–ª–∏ 2 —á–∞—Å—Ç–∏ ‚Äî MM:SS
    if (parts.length === 2) {
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    return '‚Äî';
}

/**
 * –ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ YouTube (–±–µ–∑ Shorts, —Å—Ç—Ä–∏–º–æ–≤, –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤).
 * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–¥–µ–æ.
 */
function parseAllVideoCards() {
    const allCards = document.querySelectorAll('ytd-rich-item-renderer, ytd-video-renderer, .yt-lockup-view-model');
    const seenVideoIds = new Set();
    const videoData = [];

    for (const card of allCards) {
        // --- –ò—Å–∫–ª—é—á–∞–µ–º Shorts, LIVE, Reels ---
        if (
            card.querySelector('[href*="/shorts/"]') ||
            card.querySelector('[aria-label*="Shorts" i]') ||
            card.querySelector('[aria-label*="LIVE" i]') ||
            card.closest('[is-shorts]') ||
            card.classList.contains('ytd-reel-item-renderer')
        ) {
            continue;
        }

        // --- –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ ---
        const videoLink = card.querySelector('a[href*="/watch?v="]');
        if (!videoLink) continue;

        try {
            const url = new URL(videoLink.href, 'https://www.youtube.com');
            const videoId = url.searchParams.get('v');
            if (!videoId || seenVideoIds.has(videoId)) continue;
            seenVideoIds.add(videoId);

            // --- –ù–∞–∑–≤–∞–Ω–∏–µ ---
            const titleEl = card.querySelector('h3 a span, #video-title, .yt-lockup-metadata-view-model__title');
            const title = titleEl ? titleEl.textContent?.trim() || '‚Äî' : '‚Äî';

            // --- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ---
            const durationEl = card.querySelector('.ytd-thumbnail-overlay-time-status-renderer .style-scope, .yt-badge-shape__text');
            const duration = durationEl ? formatDurationToHHMMSS(durationEl.textContent?.trim()) || '‚Äî' : '‚Äî';
            // --- –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ ---
            const imgEl = card.querySelector('img[src*="i.ytimg.com/vi/"]');
            const thumbnailUrl = imgEl ? imgEl.src.split('?')[0] : '';

            // --- –ö–∞–Ω–∞–ª –∏ ID –∫–∞–Ω–∞–ª–∞ ---
            let channelName = '‚Äî';
            let channelId = '';
            const channelLink = card.querySelector('a[href^="/@"], a[href^="/channel/"], a[href^="/c/"], .yt-lockup-byline a');
            if (channelLink) {
                channelName = channelLink.textContent?.trim() || '‚Äî';
                const href = channelLink.getAttribute('href');
                if (href) {
                    if (href.startsWith('/@')) {
                        // –ù–∞–ø—Ä–∏–º–µ—Ä, /@PodcastBar
                        channelId = href.substring(2);
                    } else if (href.startsWith('/channel/')) {
                        // –ù–∞–ø—Ä–∏–º–µ—Ä, /channel/UCxxx
                        channelId = href.substring(9);
                    } else if (href.startsWith('/c/')) {
                        // –ù–∞–ø—Ä–∏–º–µ—Ä, /c/ChannelName
                        channelId = href.substring(3);
                    }
                }
            }

            // --- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ---
            let views = '‚Äî';
            let published = '‚Äî';

            // –ò—â–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –æ–±—ã—á–Ω–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "155K views ‚Ä¢ 11 months ago"
            const metadataElements = card.querySelectorAll('.yt-content-metadata-view-model__metadata-row, #metadata-line span');
            if (metadataElements.length >= 2) {
                const metadataTexts = Array.from(metadataElements)
                    .map(el => el.textContent?.trim())
                    .filter(t => t && t !== '‚Ä¢');

                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ "‚Ä¢"
                const combinedText = metadataTexts.join(' ‚Ä¢ ');
                const parts = combinedText.split(' ‚Ä¢ ').map(p => p.trim());

                // –ò—â–µ–º "views" –∏ "published" –ø–æ —à–∞–±–ª–æ–Ω—É: "155K views ‚Ä¢ 11 months ago"
                // –ò–ª–∏ "11 months ago ‚Ä¢ 155K views" ‚Äî –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø–æ—Ä—è–¥–æ–∫
                for (const part of parts) {
                    if (part.includes('view') || part.includes('watched')) {
                        views = part;
                    } else if (part.includes('ago') || part.includes('premiered') || part.includes('streamed')) {
                        published = part;
                    }
                }
            }

            videoData.push({
                thumbnailUrl,
                title,
                duration,
                channelName,
                views,
                published,
                videoId,
                channelId
            });
        } catch (e) {
            console.warn("[Parser] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏:", e);
            continue;
        }
    }

    console.log(`[Parser] –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${videoData.length} –≤–∏–¥–µ–æ.`);
    return videoData;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.ytParser = window.ytParser || {};
window.ytParser.parseAllVideoCards = parseAllVideoCards;

console.log("[Content Module Parser] parseAllVideoCards –∑–∞–≥—Ä—É–∂–µ–Ω –≤ window.ytParser");

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\content\modules\parser.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\content\modules\scraper.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\content\modules\scraper.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\content\modules\scroller.js ===

// content/modules/scroller.js

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 * @param {number} step - –ù–∞ —Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–µ–π —Å–∫—Ä–æ–ª–ª–∏—Ç—å.
 * @returns {Promise<void>}
 */
function performSingleScroll(step = 1000) {
    return new Promise((resolve) => {
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª
        window.scrollBy(0, step);
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
        // –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å, –µ—Å–ª–∏ YouTube –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ª–µ–Ω–∏–≤–æ
        setTimeout(() => {
            console.log(`[Content Module Scroller] –í—ã–ø–æ–ª–Ω–µ–Ω –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª –Ω–∞ ${step}px.`);
            resolve();
        }, 50); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 50–º—Å
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
// –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∫ window.performSingleScroll
window.performSingleScroll = performSingleScroll;

console.log("[Content Module Scroller] –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤.");

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\content\modules\scroller.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\logger.js ===

// core/logger.js
import { ChromeStorageLogAdapter } from '../adapters/ChromeStorageLogAdapter.js';

/**
 * @typedef {import('./types/log.types.js').LogEntry} LogEntry
 * @typedef {import('./types/log.types.js').LoggerConfig} LoggerConfig
 * @typedef {import('./types/log.types.js').LogAdapter} LogAdapter
 * @typedef {import('./types/log.types.js').LogSubscriber} LogSubscriber
 */

export class Logger {
    /** @type {LogAdapter[]} */
    #adapters = [];
    /** @type {LogSubscriber[]} */
    #subscribers = [];
    /** @type {LoggerConfig} */
    #config;

    /**
     * @param {LoggerConfig} config
     */
    constructor(config = {}) {
        this.#config = {
            maxSize: config.maxSize ?? 1000,
            enableConsole: config.enableConsole ?? true,
            defaultLevel: config.defaultLevel ?? 'info',
        };

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Chrome Storage
        this.addAdapter(new ChromeStorageLogAdapter({ maxSize: this.#config.maxSize }));
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è/–≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤.
     * @param {LogAdapter} adapter
     */
    addAdapter(adapter) {
        this.#adapters.push(adapter);
    }

    /**
     * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –ª–æ–≥–∏ –∏ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞).
     * @param {LogSubscriber} callback
     */
    subscribe(callback) {
        this.#subscribers.push(callback);
    }

    /**
     * –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤.
     * @param {LogSubscriber} callback
     */
    unsubscribe(callback) {
        this.#subscribers = this.#subscribers.filter(cb => cb !== callback);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥-–∑–∞–ø–∏—Å—å.
     * @param {string} message
     * @param {'debug'|'info'|'success'|'warn'|'error'} [level]
     * @param {Object} [options]
     * @param {string} [options.module]
     * @param {string} [options.contextId]
     * @param {Object} [options.meta]
     */
    async log(message, level = this.#config.defaultLevel, options = {}) {
        const entry = {
            id: this.#generateId(),
            timestamp: Date.now(),
            level,
            message,
            module: options.module,
            contextId: options.contextId,
            meta: options.meta,
        };

        // 1. –ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä—ã
        const writePromises = this.#adapters.map(adapter => adapter.write(entry));
        await Promise.allSettled(writePromises); // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞

        // 2. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if (this.#config.enableConsole) {
            this.#logToConsole(entry);
        }

        // 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        this.#notifySubscribers(entry);

        // 4. üëá –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ popup (–µ—Å–ª–∏ –≤ background)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Service Worker (background)
        if (typeof chrome !== 'undefined' && chrome.runtime) {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–µ–ª–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ this
                chrome.runtime.sendMessage({
                    type: "newLog",
                    log: entry
                }).catch(err => {
                    // –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ sendMessage
                    if (chrome.runtime.lastError) {
                        // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ popup –∑–∞–∫—Ä—ã—Ç
                        // console.debug("Popup –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è sendMessage:", chrome.runtime.lastError.message);
                    } else {
                        console.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ popup (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è):", err);
                    }
                });
            } catch (syncSendError) {
                // –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sendMessage
                // –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (—Ä–µ–¥–∫–æ)
                console.debug("–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sendMessage:", syncSendError);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏ –∏–∑ –≤—Å–µ—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ (–±–µ—Ä–µ—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ).
     * @returns {Promise<LogEntry[]>}
     */
    async getAllLogs() {
        for (const adapter of this.#adapters) {
            try {
                const logs = await adapter.read();
                return logs;
            } catch (e) {
                console.warn("[Logger] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∏–∑ –∞–¥–∞–ø—Ç–µ—Ä–∞:", e);
            }
        }
        return []; // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ –≤–æ –≤—Å–µ—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö.
     * @returns {Promise<void>}
     */
    async clear() {
        const clearPromises = this.#adapters.map(adapter => adapter.clear());
        await Promise.allSettled(clearPromises);
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –æ—á–∏—Å—Ç–∫–µ
        this.#notifySubscribers({ type: 'CLEAR_LOGS' });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –≤ UI.
     * @param {string} metricName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'russianChannelAverage').
     * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
     * @param {Object} [options] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏.
     * @param {string} [options.format] - –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '.2f').
    */
    async updateMetric(metricName, value, options = {}) {
        const formattedValue = options.format ? value.toFixed(parseFloat(options.format)) : value;
        const entry = {
            type: 'UPDATE_METRIC',
            metricName,
            value,
            formattedValue,
            options
        };
        console.log("[Logger] updateMetric: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ popup:", entry);
        // üëá –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ popup (–µ—Å–ª–∏ –≤ background)
        if (typeof chrome !== 'undefined' && chrome.runtime) {
            try {
                chrome.runtime.sendMessage({
                    type: "updateMetric",
                    metric: entry
                }).catch(err => {
                    if (!chrome.runtime.lastError) {
                        console.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ updateMetric –≤ popup:", err);
                    }
                });
                console.log("[Logger] updateMetric: –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ popup.");
            } catch (syncSendError) {
                console.debug("–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sendMessage (updateMetric):", syncSendError);
            }
        }
        // üëá –¢–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤–Ω—É—Ç—Ä–∏ background —Å–ª—É—à–∞–µ—Ç)
        this.#notifySubscribers(entry);
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---

    /**
     * –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
     */
    debug(message, options = {}) { return this.log(message, 'debug', options); }
    info(message, options = {}) { return this.log(message, 'info', options); }
    success(message, options = {}) { return this.log(message, 'success', options); }
    warn(message, options = {}) { return this.log(message, 'warn', options); }
    error(message, options = {}) { return this.log(message, 'error', options); }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø–∏—Å–∏.
     * @returns {string}
     */
    #generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.
     * @param {LogEntry} entry
     */
    #logToConsole(entry) {
        const time = new Date(entry.timestamp).toLocaleTimeString();
        const prefix = `[${time}] [${entry.level.toUpperCase()}]`;
        const suffix = entry.module ? `[${entry.module}]` : '';
        const context = entry.contextId ? `(ctx:${entry.contextId})` : '';

        const consoleMethod = entry.level === 'error' ? console.error :
            entry.level === 'warn' ? console.warn :
                entry.level === 'debug' ? console.debug : console.log;

        consoleMethod(`${prefix} ${entry.message} ${suffix} ${context}`, entry.meta || '');
    }

    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.
     * @param {LogEntry | { type: 'CLEAR_LOGS' }} entry
     */
    #notifySubscribers(entry) {
        this.#subscribers.forEach(callback => {
            try {
                callback(entry);
            } catch (e) {
                console.error("[Logger] –û—à–∏–±–∫–∞ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ:", e);
            }
        });
    }
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\logger.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\scenario-engine.js ===


// core/scenario-engine.js
import { logger } from '../background/background.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä

/**
 * @typedef {import('./types/scenario.types.js').ScenarioDefinition} ScenarioDefinition
 * @typedef {import('./types/scenario.types.js').ScenarioContext} ScenarioContext
 */

export class ScenarioEngine {
    /** @type {Map<string, { definition: ScenarioDefinition, context: ScenarioContext, controller: AbortController }>} */
    #runningScenarios = new Map();

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –¥–≤–∏–∂–∫–µ.
     * @param {ScenarioDefinition} scenarioDefinition
     */
    registerScenario(scenarioDefinition) {
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è UI/–≤—ã–±–æ—Ä–∞
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        logger.debug(`[ScenarioEngine] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenarioDefinition.name}`, { module: 'ScenarioEngine' });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π.
     * @param {ScenarioDefinition} scenarioDefinition
     * @param {Object} [params={}] - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è.
     * @param {number} [tabId] - ID –≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ.
     * @returns {Promise<string>} ID –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
     */

    async run(scenarioDefinition, params = {}, tabId = null) {
        const instanceId = this.#generateId();
        const controller = new AbortController();
        console.log(`[ScenarioEngine] –ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è ${scenarioDefinition.id}, tabId:`, tabId); // <-- –õ–æ–≥

        /** @type {ScenarioContext} */
        const context = {
            id: instanceId,
            tabId,
            params,
            log: (message, options = {}) => {
                logger.info(message, {
                    module: options.module || `Scenario:${scenarioDefinition.id}`,
                    contextId: instanceId,
                    ...options
                });
            },
            abortSignal: async () => {
                return new Promise((resolve, reject) => {
                    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ —Å–∏–≥–Ω–∞–ª —É–∂–µ
                    if (controller.signal.aborted) {
                        // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –û–¢–ö–õ–û–ù–Ø–ï–ú –ø—Ä–æ–º–∏—Å
                        reject(new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'));
                        return;
                    }
                    // 2. –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å—Ç–∞–≤–∏–º —Å–ª—É—à–∞—Ç–µ–ª—å
                    controller.signal.addEventListener('abort', () => {
                        // –ö–æ–≥–¥–∞ controller.abort() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –û–¢–ö–õ–ê–ù–ò–ú –ø—Ä–æ–º–∏—Å
                        reject(new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'));
                    }, { once: true });

                    // 3. !!!–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!!!
                    // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Ç.
                    // –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, abortSignal –¥–æ–ª–∂–µ–Ω –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ò–¢–¨–°–Ø.
                    // –ú—ã –Ω–µ –∂–¥–µ–º "—Ä–µ–∞–ª—å–Ω–æ–≥–æ" —Å–æ–±—ã—Ç–∏—è abort, –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º,
                    // —á—Ç–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Ç.
                    resolve(); // <-- –£–°–ü–ï–®–ù–û –†–ê–ó–†–ï–®–ê–ï–ú –ø—Ä–æ–º–∏—Å
                });
            },
            // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø –≤ finally
            controller: controller
        };

        this.#runningScenarios.set(instanceId, { definition: scenarioDefinition, context, controller });

        // üëá –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ –Ω–∞—á–∞–ª–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        if (typeof chrome !== 'undefined' && chrome.runtime) {
            chrome.runtime.sendMessage({
                type: "scenarioStatus",
                status: "started",
                message: `[ScenarioEngine] –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioDefinition.name}" (ID: ${instanceId})`,
                level: "info"
            }).catch(err => {
                console.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ popup:", err);
            });
        }

        context.log(`[ScenarioEngine] –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioDefinition.name}" (ID: ${instanceId})`, { module: 'ScenarioEngine' });

        try {
            await scenarioDefinition.execute(context);
            context.log(`[ScenarioEngine] –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioDefinition.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.`, { module: 'ScenarioEngine' });
        } catch (error) {
            if (error.message === '–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.') {
                context.log(`[ScenarioEngine] –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioDefinition.name}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`, { module: 'ScenarioEngine', level: 'warn' });
            } else {
                context.log(`[ScenarioEngine] –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenarioDefinition.name}": ${error.message}`, { module: 'ScenarioEngine', level: 'error' });
                logger.error(`–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenarioDefinition.name}": ${error.stack}`, { module: 'ScenarioEngine', contextId: instanceId });
            }
        } finally {
            this.#runningScenarios.delete(instanceId);

            // üëá –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
            // –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ controller —á–µ—Ä–µ–∑ context
            const isAborted = context.controller.signal.aborted;
            const finalStatus = isAborted ? "stopped" : "finished";
            const finalMessage = isAborted ?
                `[ScenarioEngine] –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioDefinition.name}" (ID: ${instanceId}) –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.` :
                `[ScenarioEngine] –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioDefinition.name}" (ID: ${instanceId}) –∑–∞–≤–µ—Ä—à–µ–Ω.`;

            console.log(`[ScenarioEngine] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ "${finalStatus}" –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è ID: ${instanceId}`); // <-- –õ–æ–≥

            if (typeof chrome !== 'undefined' && chrome.runtime) {
                chrome.runtime.sendMessage({
                    type: "scenarioStatus",
                    status: finalStatus,
                    message: finalMessage,
                    level: "info"
                }).catch(err => {
                    console.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ popup:", err);
                });
            }
            console.log(`[ScenarioEngine] –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å "${finalStatus}" –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è ID: ${instanceId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞).`); // <-- –õ–æ–≥
        }
        return instanceId;
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π.
     * @param {string} instanceId
     * @returns {boolean} true, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
     */
    stop(instanceId) {
        const scenarioInstance = this.#runningScenarios.get(instanceId);
        if (scenarioInstance) {
            scenarioInstance.controller.abort();
            scenarioInstance.context.log(`[ScenarioEngine] –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.`, { module: 'ScenarioEngine', level: 'warn' });
            return true;
        }
        logger.warn(`[ScenarioEngine] –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π (ID: ${instanceId})`, { module: 'ScenarioEngine' });
        return false;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
     * @returns {Array<{id: string, name: string}>}
     */
    getRunningScenarios() {
        return Array.from(this.#runningScenarios.entries()).map(([id, { definition }]) => ({
            id,
            name: definition.name
        }));
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
     * @returns {string}
     */
    #generateId() {
        return `scenario_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
}


=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\scenario-engine.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\types\log.types.js ===

// core/types/log.types.js
/**
 * @typedef {Object} LogEntry
 * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
 * @property {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (–º—Å —Å 1970).
 * @property {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞: 'debug', 'info', 'success', 'warn', 'error'.
 * @property {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @property {string} [module] - –ú–æ–¥—É–ª—å –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, —Å–æ–∑–¥–∞–≤—à–∏–π –∑–∞–ø–∏—Å—å.
 * @property {string} [contextId] - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
 * @property {Object} [meta] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
 */

/**
 * @typedef {Object} LoggerConfig
 * @property {number} [maxSize=1000] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π.
 * @property {boolean} [enableConsole=true] - –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ console.
 * @property {string} [defaultLevel='info'] - –£—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
 */

/**
 * @callback LogSubscriber
 * @param {LogEntry | { type: 'CLEAR_LOGS' }} entry
 * @returns {void}
 */

/**
 * @typedef {Object} LogAdapter
 * @property {function(LogEntry): Promise<void>} write
 * @property {function(): Promise<LogEntry[]>} read
 * @property {function(): Promise<void>} clear
 */

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\types\log.types.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\types\scenario.types.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\types\scenario.types.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\types\table.types.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\types\table.types.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\utils\ai-utils.js ===

// core/utils/ai-utils.js

import { askGPT } from '../../ai/ai-service.js';

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ "–ù–∞–∑–≤–∞–Ω–∏–µ;–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤–∏–¥–µ–æ.
 * @param {Array} videos - –ú–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞.
 * @returns {string} –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ù–∞–∑–≤–∞–Ω–∏–µ;–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–∞—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π.
 */
export function formatVideoListForGPT(videos) {
    return videos
        .filter(v => v.title && v.duration && v.duration !== '‚Äî')
        .map(v => `${v.title};${v.duration}`)
        .join('\n');
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
 * @param {string} userQuery - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} videoList - –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ù–∞–∑–≤–∞–Ω–∏–µ;–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å".
 * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT.
 */
export function buildTop10ByTitlePrompt(userQuery, videoList) {
    return `you are a precise video-matching assistant. Your input consists of two parts: (1) a user request and (2) a list of available videos in CSV format "Video Title;Duration", where Duration is in HH:MM:SS. First, analyze the user request to determine the topic/intent (e.g., relaxing content, tech news, aviation) and check if the user mentions available viewing time (e.g., "I have 1 hour"). If time is specified, convert it to total seconds and exclude any video whose duration exceeds that time (allow ¬±2 minutes tolerance). If no time is mentioned, do not filter by duration. For each remaining video, assess how well its title matches the user's topic/intent and assign a relevance score from 0.0 (completely unrelated) to 1.0 (perfect match), based only on the title‚Äîdo not assume content beyond what the title states. Only include videos with relevance score ‚â• 0.4. If no videos meet both relevance and duration criteria, output exactly: No such videos available. Otherwise, output a markdown table with two columns: "Video Title" (exact title from input) and "Relevance Score" (rounded to two decimal places). Do not include durations in the output, and do not add any extra text, explanations, or formatting beyond the table. Use this exact format: Video Title;Relevance Score
–í—ã–≤–æ–¥–∏ –Ω–µ –±–æ–ª–µ–µ 10 –Ω–∞–∑–≤–∞–Ω–∏–π, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ relevance score –ø–æ —É–±—ã–≤–∞–Ω–∏—é
User request: ${userQuery}
Available videos: ${videoList}`;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ { title, videoId, relevanceScore10 }.
 * @param {string} gptResponse - –û—Ç–≤–µ—Ç –æ—Ç GPT API.
 * @param {Array} originalVideos - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ videoId –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
 * @returns {Array<{ title: string, videoId: string, relevanceScore10: number }>} –†–µ–∑—É–ª—å—Ç–∞—Ç.
 */
export function parseGPTTop10Response(gptResponse, originalVideos) {
    // –ü—Ä–∏–º–µ—Ä: "Video Title;Relevance Score\nTitle A;0.80\nTitle B;0.75"
    const lines = gptResponse.split('\n');
    const results = [];

    for (const line of lines) {
        if (!line.includes(';')) continue;

        const [title, scoreStr] = line.split(';');
        const score = parseFloat(scoreStr);

        if (isNaN(score)) continue;

        // –ù–∞—Ö–æ–¥–∏–º videoId –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const matchedVideo = originalVideos.find(v => v.title === title.trim());
        const videoId = matchedVideo ? matchedVideo.videoId : 'ID_NOT_FOUND';

        results.push({
            title: title.trim(),
            videoId,
            relevanceScore10: Math.round(score * 10) // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10 –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
        });
    }

    return results;
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\utils\ai-utils.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\utils\parser.js ===

// core/utils/parser.js

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ content script –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–±–µ–∑ –ø–æ–¥—Å–≤–µ—Ç–∫–∏).
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è tabId –∏ –ª–æ–≥–æ–≤).
 * @returns {Promise<{status: string, data?: any[], message?: string}>}
 */
export async function parseAllVideoCards(context) {
    const { log, tabId } = context;

    if (typeof tabId !== 'number' || tabId < 0) {
        const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π tabId –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${tabId}`;
        log(`‚ùå ${errorMsg}`, { module: 'Parser', level: 'error' });
        throw new Error(errorMsg);
    }

    log(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...`, { module: 'Parser' });

    try {
        const response = await chrome.tabs.sendMessage(tabId, {
            action: "parseAllVideoCards"
        });

        if (response && response.status === "success") {
            const count = response.data?.length || 0;
            log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${count} –≤–∏–¥–µ–æ.`, { module: 'Parser', level: 'success' });
            return { status: "success", data: response.data };
        } else {
            const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ content script';
            log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç content script: ${errorMsg}`, { module: 'Parser', level: 'error' });
            throw new Error(errorMsg);
        }
    } catch (err) {
        const errorMsg = err.message || '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å content script';
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: ${errorMsg}`, { module: 'Parser', level: 'error' });
        throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    }
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\utils\parser.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\utils\scroller.js ===

// core/utils/scroller.js

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç N —à–∞–≥–æ–≤ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è.
 * @param {number} [count=16] - –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å–∫—Ä–æ–ª–ª–∏—Ç—å.
 * @param {number} [delayMs=1500] - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫—Ä–æ–ª–ª–∞–º–∏ (–º—Å).
 * @param {number} [step=1000] - –ù–∞ —Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–µ–π —Å–∫—Ä–æ–ª–ª–∏—Ç—å –∑–∞ —Ä–∞–∑.
 * @returns {Promise<void>}
 */
export async function scrollPageNTimes(context, count = 16, delayMs = 1500, step = 1000) {
    const { log, abortSignal } = context;
    let tabId = context.tabId;
    console.log("[Scroller] scrollPageNTimes –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", { count, delayMs, step, tabId: context.tabId }); // <-- –õ–æ–≥
    log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${count} —Ä–∞–∑(–∞), —à–∞–≥ ${step}px, –∑–∞–¥–µ—Ä–∂–∫–∞ ${delayMs}–º—Å`, { module: 'Scroller' });

    try {

        // --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê tabId ---
        // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ tabId –≤ context
        let effectiveTabId = tabId;

        // 2. –ï—Å–ª–∏ tabId –≤—Å–µ –µ—â–µ null/undefined, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        // (–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ background.js –Ω–µ —Å–º–æ–≥ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å)
        if (effectiveTabId == null) { // == –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ null, –∏ undefined
            const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π tabId –¥–ª—è sendMessage: ${effectiveTabId}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ YouTube.`;
            log(`‚ùå ${errorMsg}`, { module: 'Scroller', level: 'error' });
            throw new Error(errorMsg); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å)
        if (typeof effectiveTabId !== 'number' || effectiveTabId < 0) {
            const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ tabId –¥–ª—è sendMessage: ${effectiveTabId} (—Ç–∏–ø: ${typeof effectiveTabId}). –û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.`;
            log(`‚ùå ${errorMsg}`, { module: 'Scroller', level: 'error' });
            throw new Error(errorMsg);
        }
        // --- –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ù–û–ô –ü–†–û–í–ï–†–ö–ò tabId ---
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ tabId –ø—Ä–æ–π–¥–µ–Ω–∞", effectiveTabId);
        for (let i = 1; i <= count; i++) {
            console.log("// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É/–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ");
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É/–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            await abortSignal();

            // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ content script –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –û–î–ù–û–ì–û —Å–∫—Ä–æ–ª–ª–∞
            log(`‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª ${i}/${count}...`, { module: 'Scroller' });

            // --- –ü–û–ü–´–¢–ö–ê –° –ë–õ–û–ö–û–ú try/catch –î–õ–Ø sendMessage ---
            let response;
            try {
                response = await chrome.tabs.sendMessage(
                    context.tabId,
                    {
                        action: "performSingleScroll",
                        step: step
                    }
                );
            } catch (sendMsgErr) {
                log(`‚ùå –û—à–∏–±–∫–∞ sendMessage –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ ${i}/${count}: ${sendMsgErr.message}`, { module: 'Scroller', level: 'error' });
                throw new Error(`–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π YouTube: ${sendMsgErr.message}`);
            }
            // --- –ö–û–ù–ï–¶ –ü–û–ü–´–¢–ö–ò ---

            if (response && response.status === "success") {
                log(`‚úÖ –°–∫—Ä–æ–ª–ª ${i}/${count} –≤—ã–ø–æ–ª–Ω–µ–Ω.`, { module: 'Scroller' });
            } else {
                const errorMsg = response?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞";
                log(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ ${i}/${count}: ${errorMsg}`, { module: 'Scroller', level: 'error' });
                throw new Error(errorMsg);
            }

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞
            await abortSignal();

            // 4. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–æ–ª–ª, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
            if (i < count) {
                log(`‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ ${delayMs}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫—Ä–æ–ª–ª–æ–º (${i + 1}/${count})...`, { module: 'Scroller' });

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
                const delayPromise = new Promise(resolve => setTimeout(resolve, delayMs));

                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –º–µ–∂–¥—É –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
                    // context.abortSignal() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π:
                    // - –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Ç (–≠–¢–û –ù–ï–í–ï–†–ù–û –î–õ–Ø RACE!)
                    // - –û—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
                    //
                    // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞: –º—ã —Ö–æ—Ç–∏–º –∂–¥–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É, –ù–û –ø—Ä–µ—Ä–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–ª —Å–∏–≥–Ω–∞–ª.
                    // –ó–Ω–∞—á–∏—Ç, abortSignal –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ñ–î–ï–¢ —Å–∏–≥–Ω–∞–ª–∞ (–Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —Å–∞–º).
                    // –ù–æ –Ω–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è resolve() –µ–≥–æ. –≠—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞.
                    //
                    // –ü–ï–†–ï–î–ï–õ–ê–ï–ú –õ–û–ì–ò–ö–£:
                    // 1. –°–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π AbortController –¥–ª—è —ç—Ç–æ–π –ø–∞—É–∑—ã.
                    // 2. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –ª–∏–±–æ —Ç–∞–π–º–∞—É—Ç, –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é.

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –ø–∞—É–∑–æ–π
                    const pauseController = new AbortController();
                    const abortPromise = new Promise((_, reject) => {
                        // –°–ª—É—à–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
                        context.controller.signal.addEventListener('abort', () => {
                            reject(new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'));
                        }, { once: true, signal: pauseController.signal }); // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞—à–µ–º—É pauseController, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å
                    });

                    // –ì–æ–Ω–∫–∞ –º–µ–∂–¥—É —Ç–∞–π–º–∞—É—Ç–æ–º –∏ —Å–∏–≥–Ω–∞–ª–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    await Promise.race([
                        new Promise(resolve => setTimeout(resolve, delayMs)), // –¢–∞–π–º–∞—É—Ç
                        abortPromise // –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    ]);

                    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –ª–∏–±–æ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è, –ª–∏–±–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ abortPromise.

                } catch (err) {
                    // –ï—Å–ª–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Å–∏–≥–Ω–∞–ª—É
                    log(`‚èπÔ∏è –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (${i + 1}/${count}).`, { module: 'Scroller', level: 'warn' });
                    throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
                }
                // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è
            }
        }

        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∫—Ä–æ–ª–ª–æ–≤ –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
        try {
            const countResponse = await chrome.tabs.sendMessage(context.tabId, {
                action: "getEstimatedCardCount"
            });
            const cardCount = countResponse?.cardCount || 0;
            log(`‚úÖ –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ ${cardCount} –∫–∞—Ä—Ç–æ—á–µ–∫.`, { module: 'Scroller' });
        } catch (countErr) {
            console.warn("[Core Scroller] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞:", countErr);
            log(`‚úÖ –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.`, { module: 'Scroller' });
        }

    } catch (err) {
        console.error("[Scroller] –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ scrollPageNTimes:", err); // <-- –õ–æ–≥ –æ—à–∏–±–æ–∫

        if (err.message === '–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.') {
            log(`‚èπÔ∏è –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`, { module: 'Scroller', level: 'warn' });
        } else {
            log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞: ${err.message}`, { module: 'Scroller', level: 'error' });
        }
        throw err; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    }
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\core\utils\scroller.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\popup.css ===

:root {
    --bg: #fff5f5;
    /* –ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã–π —Ñ–æ–Ω */
    --input-bg: white;
    --input-border: #fbb6c2;
    --btn-primary: #f78fb3;
    --btn-primary-hover: #f372a1;
    --text: #333;
    --text-light: #777;
    --progress: #fde2e4;
    --progress-text: #d63384;
    --shadow: 0 2px 10px rgba(247, 143, 179, 0.2);
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: system-ui, sans-serif;
}

body {
    width: 400px;
    height: 600px;
    background-color: var(--bg);
    color: var(--text);
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

.container {
    height: 100%;
    display: flex;
    flex-direction: column;
    padding: 16px;
}

.header {
    text-align: center;
    margin-bottom: 16px;
}

.header h1 {
    font-size: 20px;
    color: var(--progress-text);
}

.main {
    flex: 1;
    overflow-y: auto;
    padding: 8px 0;
}

.intro {
    text-align: center;
    padding: 20px;
    color: var(--text-light);
}

.chat-history {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.chat-bubble {
    background: white;
    padding: 12px;
    border-radius: 12px;
    box-shadow: var(--shadow);
    max-width: 80%;
    margin-left: auto;
    word-wrap: break-word;
}

.response-bubble {
    background: #fce4ec;
    margin-right: auto;
    margin-left: 0;
    color: var(--text);
}

.result-container {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.video-result-block {
    background: white;
    padding: 12px;
    border-radius: 12px;
    box-shadow: var(--shadow);
    width: 100%;
}

.video-title-link {
    font-weight: bold;
    color: var(--progress-text);
    text-decoration: underline;
    display: block;
    margin-bottom: 8px;
}

.clips-container {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.clip-block {
    display: flex;
    flex-direction: column;
    gap: 6px;
}

.clip-info {
    font-size: 12px;
    color: var(--text-light);
    margin-top: 4px;
}

.no-clips {
    font-size: 12px;
    color: var(--text-light);
    font-style: italic;
}

iframe {
    border-radius: 6px;
}

.progress-indicator {
    background: var(--progress);
    padding: 8px 12px;
    border-radius: 6px;
    text-align: center;
    margin: 10px 0;
    color: var(--progress-text);
    font-weight: 500;
}

.hidden {
    display: none;
}

.footer {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.input-container {
    display: flex;
    gap: 8px;
}

#userInput {
    flex: 1;
    padding: 10px 14px;
    border: 1px solid var(--input-border);
    border-radius: 24px;
    outline: none;
    background: var(--input-bg);
}

#userInput:focus {
    border-color: var(--btn-primary);
}

.send-btn {
    background: var(--btn-primary);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
}

.send-btn:hover {
    background: var(--btn-primary-hover);
}

.clear-btn {
    background: none;
    border: 1px solid var(--input-border);
    color: var(--text-light);
    padding: 8px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
}

.clear-btn:hover {
    background: #f8d7da;
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\popup.css ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\popup.html ===

<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI YouTube Assistant</title>
    <link rel="stylesheet" href="popup.css" />
</head>

<body>
    <div class="container">
        <header class="header">
            <h1>üé• AI YouTube Assistant</h1>
        </header>

        <main class="main">
            <!-- –ò–Ω—Ç—Ä–æ, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ -->
            <div id="introSection" class="intro">
                <h2>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h2>
                <p>–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –ú—ã –Ω–∞–π–¥—ë–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥–µ–æ, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –∏ –ø–æ–∫–∞–∂–µ–º –ª—É—á—à–∏–µ
                    –æ—Ç—Ä—ã–≤–∫–∏.</p>
            </div>

            <!-- –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ -->
            <div id="chatHistory" class="chat-history"></div>

            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ -->
            <div id="progressIndicator" class="progress-indicator hidden">
                <p id="progressText">–®–∞–≥ 1 –∏–∑ 7: –°–∫—Ä–æ–ª–ª–∏–Ω–≥...</p>
            </div>
        </main>

        <footer class="footer">
            <div class="input-container">
                <input type="text" id="userInput" placeholder="–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å..." />
                <button id="sendButton" class="send-btn">üöÄ</button>
            </div>
            <button id="clearHistoryBtn" class="clear-btn">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é</button>
        </footer>
    </div>

    <script type="module" src="./popup.js"></script>
</body>

</html>

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\popup.html ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\popup.js ===

class PopupApp {
    constructor() {
        this.initElements();
        this.bindEvents();
        this.loadStateFromStorage(); // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.updateUIFromState();    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.listenToBackground();   // ‚úÖ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å background
    }

    initElements() {
        this.introSection = document.getElementById('introSection');
        this.chatHistoryEl = document.getElementById('chatHistory');
        this.progressIndicator = document.getElementById('progressIndicator');
        this.progressText = document.getElementById('progressText');
        this.userInput = document.getElementById('userInput');
        this.sendButton = document.getElementById('sendButton');
        this.clearHistoryBtn = document.getElementById('clearHistoryBtn');
    }

    bindEvents() {
        this.sendButton.addEventListener('click', () => this.submitQuery());
        this.userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.submitQuery();
        });
        this.clearHistoryBtn.addEventListener('click', () => this.clearHistory());
    }

    // ‚úÖ –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç background
    listenToBackground() {
        chrome.runtime.onMessage.addListener((request) => {
            if (request.type === 'scenarioStatus' && request.instanceId) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∫ —Ç–µ–∫—É—â–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
                if (this.scenarioState.runningInstanceId === request.instanceId) {
                    if (request.status === 'started') {
                        this.setProcessing(true);
                        this.progressText.textContent = `–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω...`;
                    } else if (request.status === 'finished') {
                        this.setProcessing(false);
                        this.progressIndicator.classList.add('hidden');
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ storage
                        this.loadScenarioResult();
                    } else if (request.status === 'stopped') {
                        this.setProcessing(false);
                        this.progressIndicator.classList.add('hidden');
                        this.addMessageToHistory('‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.', 'system');
                    }
                }
            }
            // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –õ–û–ì–ò –û–¢ –°–¶–ï–ù–ê–†–ò–Ø
            else if (request.type === 'newLog' && request.log) {
                const logMessage = request.log.message;
                // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ
                if (logMessage.includes('–®–∞–≥') && (logMessage.includes('–∏–∑') || logMessage.includes('scroll') || logMessage.includes('parse'))) {
                    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–∞
                    this.progressText.textContent = logMessage;
                    this.progressIndicator.classList.remove('hidden');
                }
            }
        });
    }

    async loadStateFromStorage() {
        const result = await chrome.storage.local.get([
            'chatHistory',
            'scenarioState'
        ]);

        this.chatHistory = result.chatHistory || [];
        this.scenarioState = result.scenarioState || {
            isProcessing: false,
            currentStep: 0,
            totalSteps: 0,
            result: null,
            runningInstanceId: null
        };
    }

    updateUIFromState() {
        this.updateIntroVisibility();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        this.chatHistoryEl.innerHTML = '';
        for (const item of this.chatHistory) {
            this.addMessageToHistory(item.query, 'user', false);
            for (const res of item.responses) {
                this.addMessageToHistory(res, 'system', false);
            }
            if (item.result) {
                this.addResultToHistory(item.result, false);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞
        this.userInput.disabled = this.scenarioState.isProcessing;
        this.sendButton.disabled = this.scenarioState.isProcessing;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω
        if (this.scenarioState.isProcessing) {
            this.progressIndicator.classList.remove('hidden');
            // –ï—Å–ª–∏ currentStep === 0, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ü–µ–Ω–∞—Ä–∏–π –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —à–∞–≥–∏
            this.progressText.textContent = `–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω...`;
        } else {
            this.progressIndicator.classList.add('hidden');
        }
    }

    async submitQuery() {
        const query = this.userInput.value.trim();
        if (!query || this.scenarioState.isProcessing) return;

        this.addMessageToHistory(query, 'user');
        this.userInput.value = '';
        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º setProcessing(true) –∑–¥–µ—Å—å, –∞ –∂–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç background

        try {
            const response = await chrome.runtime.sendMessage({
                action: "runScenario",
                scenarioId: "ai-video-recommendation",
                params: { userQuery: query }
            });

            if (response?.status === 'started') {
                this.scenarioState.runningInstanceId = response.instanceId;
                this.scenarioState.isProcessing = true;
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                chrome.storage.local.set({ scenarioState: this.scenarioState });
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                this.userInput.disabled = true;
                this.sendButton.disabled = true;
                this.progressIndicator.classList.remove('hidden');
                this.progressText.textContent = `–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω...`;
            } else {
                throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
        } catch (err) {
            this.addMessageToHistory(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}`, 'system');
        }
    }

    addMessageToHistory(text, sender, addToState = true) {
        const bubble = document.createElement('div');
        bubble.className = `chat-bubble ${sender === 'user' ? '' : 'response-bubble'}`;
        bubble.textContent = text;
        this.chatHistoryEl.appendChild(bubble);
        this.chatHistoryEl.scrollTop = this.chatHistoryEl.scrollHeight;

        if (sender === 'user' && addToState) {
            this.chatHistory.push({ query: text, responses: [], result: null });
            this.saveHistoryToStorage();
        } else if (addToState) {
            const last = this.chatHistory[this.chatHistory.length - 1];
            if (last) last.responses.push(text);
            this.saveHistoryToStorage();
        }

        this.updateIntroVisibility();
    }

    updateIntroVisibility() {
        this.introSection.classList.toggle('hidden', this.chatHistory.length > 0);
    }

    setProcessing(isProcessing) {
        this.scenarioState.isProcessing = isProcessing;
        this.userInput.disabled = isProcessing;
        this.sendButton.disabled = isProcessing;

        if (isProcessing) {
            this.progressIndicator.classList.remove('hidden');
            this.progressText.textContent = `–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω...`;
        } else {
            this.progressIndicator.classList.add('hidden');
        }

        chrome.storage.local.set({ scenarioState: this.scenarioState });
    }

    // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ storage –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
    async loadScenarioResult() {
        try {
            const result = await chrome.storage.local.get(['aiScenarioResults']);
            const clipsData = result.aiScenarioResults || [];

            if (clipsData.length === 0) {
                this.addMessageToHistory('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', 'system');
                return;
            }

            this.addMessageToHistory('–í–∏–¥–µ–æ –∏ –Ω–∞—Ä–µ–∑–∫–∏ –≥–æ—Ç–æ–≤—ã!', 'system');
            this.addResultToHistory(clipsData);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏
            const last = this.chatHistory[this.chatHistory.length - 1];
            if (last) {
                last.result = clipsData;
                this.saveHistoryToStorage();
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
            this.scenarioState.result = clipsData;
            this.scenarioState.runningInstanceId = null;
            this.scenarioState.isProcessing = false;
            chrome.storage.local.set({ scenarioState: this.scenarioState });

            this.userInput.disabled = false;
            this.sendButton.disabled = false;
            this.progressIndicator.classList.add('hidden');
        } catch (err) {
            this.addMessageToHistory(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${err.message}`, 'system');
        }
    }

    addResultToHistory(result, addToState = true) {
        const resultContainer = document.createElement('div');
        resultContainer.className = 'result-container';

        for (const video of result) {
            const videoBlock = document.createElement('div');
            videoBlock.className = 'video-result-block';

            const titleLink = document.createElement('a');
            titleLink.href = `https://www.youtube.com/watch?v=${video.videoId}`;
            titleLink.target = '_blank';
            titleLink.textContent = `${video.title} (–û—Ü–µ–Ω–∫–∞: ${video.score})`;
            titleLink.className = 'video-title-link';

            videoBlock.appendChild(titleLink);

            const clipsContainer = document.createElement('div');
            clipsContainer.className = 'clips-container';

            if (video.clips && video.clips.length > 0) {
                for (const clip of video.clips) {
                    const clipBlock = document.createElement('div');
                    clipBlock.className = 'clip-block';

                    const startTimeSec = this.timeToSeconds(clip.start);
                    const endTimeSec = this.timeToSeconds(clip.end);

                    const iframe = document.createElement('iframe');
                    iframe.width = '320';
                    iframe.height = '180';
                    iframe.src = `https://www.youtube.com/embed/${video.videoId}?start=${startTimeSec}&end=${endTimeSec}&autoplay=0`;
                    iframe.frameBorder = '0';
                    iframe.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';
                    iframe.allowFullscreen = true;

                    clipBlock.appendChild(iframe);

                    const clipInfo = document.createElement('div');
                    clipInfo.className = 'clip-info';
                    clipInfo.textContent = `${clip.title} (${clip.start} - ${clip.end})`;
                    clipBlock.appendChild(clipInfo);

                    clipsContainer.appendChild(clipBlock);
                }
            } else {
                const noClips = document.createElement('div');
                noClips.className = 'no-clips';
                noClips.textContent = '–ù–∞—Ä–µ–∑–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.';
                clipsContainer.appendChild(noClips);
            }

            videoBlock.appendChild(clipsContainer);
            resultContainer.appendChild(videoBlock);
        }

        this.chatHistoryEl.appendChild(resultContainer);
        this.chatHistoryEl.scrollTop = this.chatHistoryEl.scrollHeight;

        // –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ loadScenarioResult, –µ—Å–ª–∏ addToState = true
    }

    timeToSeconds(timeStr) {
        const [minutes, seconds] = timeStr.split(':').map(Number);
        return minutes * 60 + seconds;
    }

    async clearHistory() {
        if (!confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) return;

        this.chatHistory = [];
        this.scenarioState = {
            isProcessing: false,
            currentStep: 0,
            totalSteps: 0,
            result: null,
            runningInstanceId: null
        };
        this.chatHistoryEl.innerHTML = '';
        this.updateIntroVisibility();

        await chrome.storage.local.set({
            chatHistory: [],
            scenarioState: this.scenarioState,
            aiScenarioResults: null
        });
    }

    saveHistoryToStorage() {
        chrome.storage.local.set({ chatHistory: this.chatHistory });
    }
}

document.addEventListener('DOMContentLoaded', () => new PopupApp());

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\popup.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\components\ControlSection.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\components\ControlSection.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\components\LogSection.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\components\LogSection.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\components\ResultsSection.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\components\ResultsSection.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\components\SettingsSection.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup\components\SettingsSection.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\popup-dev.css ===

body {
    font-family: system-ui, sans-serif;
    padding: 16px;
    width: 600px;
    background: #f9fafb;
    color: #111;
}

.container {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

h1 {
    font-size: 20px;
    margin: 0;
    color: #4338ca;
}

.control-group {
    display: flex;
    flex-direction: column;
    gap: 6px;
}

.control-group label {
    font-weight: 600;
    font-size: 14px;
}

.control-group select {
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    background: white;
}

.button-group {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 8px;
}

.btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    font-size: 14px;
}

.btn.primary {
    background: #4338ca;
    color: white;
}

.btn.primary:hover {
    background: #3730a3;
}

.btn.warning {
    background: #ca8a04;
    color: white;
}

.btn.warning:hover {
    background: #a16207;
}

.btn.info {
    background: #0284c7;
    color: white;
}

.btn.info:hover {
    background: #0369a1;
}

.btn.secondary {
    background: #64748b;
    color: white;
}

.btn.secondary:hover {
    background: #475569;
}

.btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.log-section h2 {
    font-size: 16px;
    margin: 0;
}

.log-container {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    padding: 12px;
    height: 200px;
    overflow-y: auto;
    font-family: monospace;
    font-size: 12px;
    line-height: 1.4;
}

.log-entry {
    padding: 4px 0;
    border-bottom: 1px solid #f3f4f6;
}

.log-placeholder {
    color: #94a3b8;
    text-align: center;
    padding: 20px 0;
}

/* popup-dev/popup-dev.css */

.video-clips-output {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    padding: 12px;
    max-height: 300px;
    overflow-y: auto;
    font-family: system-ui, sans-serif;
    font-size: 14px;
    line-height: 1.5;
}

.video-block {
    margin-bottom: 16px;
}

.video-title-link {
    font-weight: bold;
    color: #4338ca;
    text-decoration: underline;
}

.clips-list {
    list-style-type: none;
    padding-left: 0;
    margin-top: 8px;
}

.clip-item {
    padding: 4px 0;
    border-bottom: 1px solid #f3f4f6;
}

.clip-link {
    color: #0284c7;
    text-decoration: underline;
}

/* popup-dev/popup-dev.css */

.clips-container {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 8px;
}

.clip-block {
    display: flex;
    flex-direction: column;
    gap: 6px;
}

.clip-info {
    font-size: 12px;
    color: #64748b;
    margin-top: 4px;
}

iframe {
    border-radius: 6px;
}

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\popup-dev.css ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\popup-dev.html ===

<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>üîß Dev Popup ‚Äî AI YouTube Assistant</title>
    <link rel="stylesheet" href="popup-dev.css" />
</head>

<body>
    <div class="container">
        <h1>üîß Dev Popup</h1>
        <div class="control-group">
            <label for="userQueryInput">–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
            <input type="text" id="userQueryInput" placeholder="–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å..." />
        </div>
        <div class="control-group">
            <label for="top10JsonInput">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø-10 –≤–∏–¥–µ–æ (JSON):</label>
            <textarea id="top10JsonInput" placeholder='[
    {
      "title": "...",
      "videoId": "...",
      "relevanceScore10": 10
    }
  ]'></textarea>
        </div>
        <div class="control-group">
            <label for="videoTranscriptJsonInput">–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π (JSON):</label>
            <textarea id="videoTranscriptJsonInput" placeholder='[
    {
      "title": "...",
      "duration": "05:45",
      "initialScore": 8,
      "transcript": [
        { "chunk": 1, "chunk_text": "..." },
        ...
      ]
    }
  ]'></textarea>
        </div>
        <div class="control-group">
            <label for="deepEvalJsonInput">–ì–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ GPT (JSON):</label>
            <textarea id="deepEvalJsonInput" placeholder='[
    ["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ", "id", 9, "–û–ø–∏—Å–∞–Ω–∏–µ..."],
    ...
  ]'></textarea>
        </div>

        <!-- –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è -->
        <div class="control-group">
            <label for="scenarioSelect">–°—Ü–µ–Ω–∞—Ä–∏–π:</label>
            <select id="scenarioSelect">
                <option value="ai-video-recommendation">AI: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É</option>
            </select>
        </div>

        <!-- –í—ã–±–æ—Ä —ç—Ç–∞–ø–∞ -->
        <div class="control-group">
            <label for="stepSelect">–≠—Ç–∞–ø:</label>
            <select id="stepSelect">
                <option value="step-scroll">1. –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã</option>
                <option value="step-parse-videos">2. –°–ø–∞—Ä—Å–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ (–±–µ–∑ Shorts)</option>
                <option value="step-gpt-get-top10-by-title">3. GPT: –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                <option value="step-transcription">4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏</option>
                <option value="step-gpt-deep-eval">5. GPT: –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ</option>
                <option value="step-clip-generation">6. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫</option>
                <option value="step-display-clips">7. –í—ã–≤–æ–¥ –Ω–∞—Ä–µ–∑–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</option>
            </select>
        </div>

        <!-- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
        <div class="button-group">
            <button id="runScenarioBtn" class="btn primary">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π</button>
            <button id="stopScenarioBtn" class="btn warning" disabled>‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
            <button id="runStepBtn" class="btn info">‚è≠Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø</button>
            <button id="clearLogBtn" class="btn secondary">üßπ –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª</button>
        </div>

        <!-- –ñ—É—Ä–Ω–∞–ª -->
        <div class="log-section">
            <h2>üìã –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
            <div id="logContainer" class="log-container">
                <div class="log-placeholder">–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç</div>
            </div>
        </div>

        <div class="control-group">
            <label for="videoClipsOutput">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ä–µ–∑–æ–∫ (–≤–∏–¥–µ–æ):</label>
            <div id="videoClipsOutput" class="video-clips-output"></div>
        </div>

        <div class="control-group">
            <label for="clipsJsonInput">–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Ä–µ–∑–∫–∏ (JSON):</label>
            <textarea id="clipsJsonInput" placeholder='[
    {
      "title": "–ù–µ–∑–∞–º–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ —Ç–≤–æ–µ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ...",
      "videoId": "EkXhXKtvdf8",
      "score": 9,
      "clips": [
        {
          "start": "00:48",
          "end": "02:07",
          "title": "–ü–æ—á–µ–º—É –∑—É–±—å—è –Ω–∞ –∑–≤—ë–∑–¥–æ—á–∫–∞—Ö –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –±—Ä–∞–∫"
        }
      ]
    }
  ]'></textarea>
        </div>
    </div>

    <script type="module" src="./popup-dev.js"></script>
</body>

</html>

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\popup-dev.html ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\popup-dev.js ===


function timeToSeconds(timeStr) {
    const [minutes, seconds] = timeStr.split(':').map(Number);
    return minutes * 60 + seconds;
}

class DevPopup {
    constructor() {
        this.isRunning = false;
        this.initElements();
        this.bindEvents();
        this.listenToBackground();
    }

    initElements() {
        this.scenarioSelect = document.getElementById('scenarioSelect');
        this.stepSelect = document.getElementById('stepSelect');
        this.runScenarioBtn = document.getElementById('runScenarioBtn');
        this.stopScenarioBtn = document.getElementById('stopScenarioBtn');
        this.runStepBtn = document.getElementById('runStepBtn');
        this.clearLogBtn = document.getElementById('clearLogBtn');
        this.logContainer = document.getElementById('logContainer');
    }

    bindEvents() {
        this.runScenarioBtn.addEventListener('click', () => this.runScenarioFromPopupDev());
        this.stopScenarioBtn.addEventListener('click', () => this.stopScenario());
        this.runStepBtn.addEventListener('click', () => this.runStep());
        this.clearLogBtn.addEventListener('click', () => this.clearLog());
    }

    async runScenarioFromPopupDev() {
        const scenarioId = this.scenarioSelect.value;
        if (!scenarioId) {
            this.log(`‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π.`, 'error');
            return;
        }

        // --- ‚úÖ –ß–ò–¢–ê–ï–ú userQuery –∏–∑ –ø–æ–ª—è ---
        const userQuery = document.getElementById('userQueryInput')?.value?.trim();

        // --- ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú, –ù–£–ñ–ù–û –õ–ò –æ–Ω –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è ---
        if (scenarioId === 'ai-video-recommendation' && !userQuery) {
            this.log(`‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioId}".`, 'error');
            return;
        }

        this.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioId}...`, 'info');

        try {
            const response = await chrome.runtime.sendMessage({
                action: "runScenario",
                scenarioId,
                // --- ‚úÖ –ü–ï–†–ï–î–ê–Å–ú userQuery –≤ params ---
                params: {
                    userQuery, // ‚úÖ
                    devMode: true // ‚úÖ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    // ... –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è
                }
            });

            if (response?.status === 'started') {
                this.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω (ID: ${response.instanceId})`, 'success');
            } else {
                throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${err.message}`, 'error');
        }
    }

    async stopScenario() {
        this.log('üì§ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
        try {
            const response = await chrome.runtime.sendMessage({ action: 'stopAllScenarios' });
            if (response?.status === 'success') {
                this.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'warn');
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${err.message}`, 'error');
        } finally {
            this.setRunning(false);
        }
    }

    // popup-dev/popup-dev.js ‚Üí –º–µ—Ç–æ–¥ runStep()
    async runStep() {
        const stepId = this.stepSelect.value;
        const scenarioId = this.scenarioSelect.value;

        if (stepId === 'step-scroll') {
            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runScrollStep",
                    params: {
                        count: 10,      // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–æ–ª–ª–æ–≤
                        delayMs: 500, // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫—Ä–æ–ª–ª–∞–º–∏
                        step: 1000     // –ø–∏–∫—Å–µ–ª–µ–π –∑–∞ —Ä–∞–∑
                    }
                });
                if (response?.status === 'success') {
                    this.log(`‚úÖ –°–∫—Ä–æ–ª–ª –∑–∞–≤–µ—Ä—à—ë–Ω`);
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∞: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-parse-videos') {
            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∏–¥–µ–æ...`);
            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runParseVideosStep" // ‚Üê –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π action
                });
                if (response?.status === 'success') {
                    const count = response.data.length;
                    this.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${count} –≤–∏–¥–µ–æ.`, 'success');
                    console.table(response.data); // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-gpt-get-top10-by-title') {
            const userQuery = document.getElementById('userQueryInput').value.trim();
            if (!userQuery) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: GPT ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...`, 'info');
            this.log(`üìù –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userQuery}"`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runGPTGetTop10ByTitleStep", // üëà –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è
                    params: { userQuery }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –¢–æ–ø-10 –≤–∏–¥–µ–æ –æ—Ç GPT:`, 'success');
                    console.table(response.data); // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É
                    for (const item of response.data) {
                        this.log(`${item.title};${item.videoId};${item.relevanceScore10}`, 'info');
                    }
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-10: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-transcription') {
            const top10Json = document.getElementById('top10JsonInput').value.trim();
            if (!top10Json) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å —Ç–æ–ø-10 –≤–∏–¥–µ–æ.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runTranscriptionStep",
                    params: { top10Json }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:`, 'success');

                    // --- –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ ---
                    const output = response.results.map(item => {
                        const transcript = item.chunks.map((chunkText, index) => ({
                            chunk: index + 1,
                            chunk_text: chunkText
                        }));

                        return {
                            title: item.title,
                            videoID: item.videoId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º videoId –∏–∑ top10Json
                            transcript
                        };
                    });

                    console.group('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∏–∂–µ):');
                    console.table(output); // –í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                    console.groupEnd();

                    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç
                    console.log('üìã –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):');
                    console.log(JSON.stringify(output, null, 2));

                    // –í—ã–≤–æ–¥–∏–º –≤ –∂—É—Ä–Ω–∞–ª popup
                    this.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: ${output.length}`, 'info');
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-gpt-deep-eval') {
            const userQuery = document.getElementById('userQueryInput').value.trim();
            if (!userQuery) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, 'error');
                return;
            }

            const videoJson = document.getElementById('videoTranscriptJsonInput').value.trim();
            if (!videoJson) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å –≤–∏–¥–µ–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: GPT ‚Äî –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ...`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runGPTDeepEvalStep",
                    params: { userQuery, videoJson }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏:`, 'success');

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    const output = response.results.map(item => [
                        item.title,
                        item.videoId,
                        item.revisedScore,
                        item.summary
                    ]);

                    console.group('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∏–∂–µ):');
                    console.table(output);
                    console.groupEnd();

                    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç
                    console.log('üìã –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):');
                    console.log(JSON.stringify(output, null, 2));

                    this.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: ${output.length}`, 'info');
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-clip-generation') {
            const userQuery = document.getElementById('userQueryInput').value.trim();
            if (!userQuery) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, 'error');
                return;
            }

            const transcriptJson = document.getElementById('videoTranscriptJsonInput').value.trim();
            if (!transcriptJson) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π.`, 'error');
                return;
            }

            const deepEvalJson = document.getElementById('deepEvalJsonInput').value.trim();
            if (!deepEvalJson) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫...`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runClipGenerationStep",
                    params: { userQuery, transcriptJson, deepEvalJson }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ä–µ–∑–æ–∫:`, 'success');

                    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                    console.group('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ä–µ–∑–æ–∫ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∏–∂–µ):');
                    console.table(response.results);
                    console.groupEnd();

                    console.log('üìã –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):');
                    console.log(JSON.stringify(response.results, null, 2));

                    // –í—ã–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ videoClipsOutput
                    const outputDiv = document.getElementById('videoClipsOutput');
                    outputDiv.innerHTML = '';

                    for (const item of response.results) {
                        const videoBlock = document.createElement('div');
                        videoBlock.className = 'video-block';

                        const titleLink = document.createElement('a');
                        titleLink.href = `https://www.youtube.com/watch?v=${item.videoId}`;
                        titleLink.target = '_blank';
                        titleLink.textContent = `${item.title} - ${item.score}`;
                        titleLink.className = 'video-title-link';

                        videoBlock.appendChild(titleLink);

                        const clipsList = document.createElement('ul');
                        clipsList.className = 'clips-list';

                        for (const clip of item.clips) {
                            const clipItem = document.createElement('li');
                            clipItem.className = 'clip-item';

                            const timeLink = document.createElement('a');
                            timeLink.href = `https://www.youtube.com/watch?v=${item.videoId}&t=${timeToSeconds(clip.start)}s`;
                            timeLink.target = '_blank';
                            timeLink.textContent = `${clip.title} (${clip.start} - ${clip.end})`;
                            timeLink.className = 'clip-link';

                            clipItem.appendChild(timeLink);
                            clipsList.appendChild(clipItem);
                        }

                        videoBlock.appendChild(clipsList);
                        outputDiv.appendChild(videoBlock);
                    }

                    this.log(`–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Ä–µ–∑–æ–∫: ${response.results.length}`, 'info');
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ä–µ–∑–æ–∫: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-display-clips') {
            const clipsJson = document.getElementById('clipsJsonInput').value.trim();
            if (!clipsJson) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –í—ã–≤–æ–¥ –Ω–∞—Ä–µ–∑–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...`, 'info');

            try {
                const clipsData = JSON.parse(clipsJson);
                if (!Array.isArray(clipsData)) {
                    throw new Error("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏.");
                }

                // –í—ã–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ videoClipsOutput
                const outputDiv = document.getElementById('videoClipsOutput');
                outputDiv.innerHTML = '';

                for (const item of clipsData) {
                    const videoBlock = document.createElement('div');
                    videoBlock.className = 'video-block';

                    // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ (—Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube)
                    const titleLink = document.createElement('a');
                    titleLink.href = `https://www.youtube.com/watch?v=${item.videoId}`;
                    titleLink.target = '_blank';
                    titleLink.textContent = `${item.title} (–û—Ü–µ–Ω–∫–∞: ${item.score})`;
                    titleLink.className = 'video-title-link';

                    videoBlock.appendChild(titleLink);

                    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞—Ä–µ–∑–æ–∫
                    const clipsContainer = document.createElement('div');
                    clipsContainer.className = 'clips-container';

                    for (const clip of item.clips) {
                        const clipBlock = document.createElement('div');
                        clipBlock.className = 'clip-block';

                        // –ü–ª–µ–µ—Ä YouTube —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
                        const startTimeSec = timeToSeconds(clip.start);
                        const endTimeSec = timeToSeconds(clip.end);

                        const iframe = document.createElement('iframe');
                        iframe.width = '320';
                        iframe.height = '180';
                        iframe.src = `https://www.youtube.com/embed/${item.videoId}?start=${startTimeSec}&end=${endTimeSec}&autoplay=0`;
                        iframe.frameBorder = '0';
                        iframe.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';
                        iframe.allowFullscreen = true;

                        clipBlock.appendChild(iframe);

                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä–µ–∑–∫–µ
                        const clipInfo = document.createElement('div');
                        clipInfo.className = 'clip-info';
                        clipInfo.textContent = `${clip.title} (${clip.start} - ${clip.end})`;
                        clipBlock.appendChild(clipInfo);

                        clipsContainer.appendChild(clipBlock);
                    }

                    videoBlock.appendChild(clipsContainer);
                    outputDiv.appendChild(videoBlock);
                }

                this.log(`‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ ${clipsData.length} –≤–∏–¥–µ–æ —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏.`, 'success');
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –Ω–∞—Ä–µ–∑–æ–∫: ${err.message}`, 'error');
            }
            return;
        }
        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
    }

    clearLog() {
        this.logContainer.innerHTML = '<div class="log-placeholder">–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç</div>';
    }

    log(message, level = 'info') {
        const placeholder = this.logContainer.querySelector('.log-placeholder');
        if (placeholder) placeholder.remove();

        const entry = document.createElement('div');
        entry.className = `log-entry log-${level}`;
        const time = new Date().toLocaleTimeString();
        entry.textContent = `[${time}] ${message}`;
        this.logContainer.appendChild(entry);
        this.logContainer.scrollTop = this.logContainer.scrollHeight;
    }

    setRunning(isRunning) {
        this.isRunning = isRunning;
        this.runScenarioBtn.disabled = isRunning;
        this.stopScenarioBtn.disabled = !isRunning;
        this.runStepBtn.disabled = isRunning; // –±–ª–æ–∫–∏—Ä—É–µ–º —à–∞–≥–∏ –≤–æ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    }

    listenToBackground() {
        chrome.runtime.onMessage.addListener((request) => {
            if (request.type === 'newLog' && request.log) {
                this.log(request.log.message, request.log.level || 'info');
            }
            if (request.type === 'scenarioStatus') {
                if (request.status === 'stopped' || request.status === 'finished') {
                    this.setRunning(false);
                }
            }
            if (request.type === 'logsCleared') {
                this.clearLog();
            }
            if (request.type === 'scenarioStatus' && request.status === 'finished') {
                this.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...`, 'success');
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                setTimeout(() => this.loadScenarioResults(), 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
            }
        });
    }

    async loadScenarioResults() {
        try {
            const result = await chrome.storage.local.get(['aiScenarioResults']);
            const clipsData = result.aiScenarioResults || [];

            if (clipsData.length === 0) {
                this.log(`‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è.`, 'warn');
                return;
            }

            this.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${clipsData.length} –≤–∏–¥–µ–æ —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è.`, 'success');

            // –í—ã–≤–æ–¥–∏–º –≤ videoClipsOutput (–∫–∞–∫ –≤ —à–∞–≥–µ 7)
            const outputDiv = document.getElementById('videoClipsOutput');
            outputDiv.innerHTML = '';

            for (const item of clipsData) {
                const videoBlock = document.createElement('div');
                videoBlock.className = 'video-block';

                const titleLink = document.createElement('a');
                titleLink.href = `https://www.youtube.com/watch?v=${item.videoId}`;
                titleLink.target = '_blank';
                titleLink.textContent = `${item.title} (–û—Ü–µ–Ω–∫–∞: ${item.score})`;
                titleLink.className = 'video-title-link';

                videoBlock.appendChild(titleLink);

                const clipsContainer = document.createElement('div');
                clipsContainer.className = 'clips-container';

                for (const clip of item.clips) {
                    const clipBlock = document.createElement('div');
                    clipBlock.className = 'clip-block';

                    const startTimeSec = timeToSeconds(clip.start);
                    const endTimeSec = timeToSeconds(clip.end);

                    const iframe = document.createElement('iframe');
                    iframe.width = '320';
                    iframe.height = '180';
                    iframe.src = `https://www.youtube.com/embed/${item.videoId}?start=${startTimeSec}&end=${endTimeSec}&autoplay=0`;
                    iframe.frameBorder = '0';
                    iframe.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';
                    iframe.allowFullscreen = true;

                    clipBlock.appendChild(iframe);

                    const clipInfo = document.createElement('div');
                    clipInfo.className = 'clip-info';
                    clipInfo.textContent = `${clip.title} (${clip.start} - ${clip.end})`;
                    clipBlock.appendChild(clipInfo);

                    clipsContainer.appendChild(clipBlock);
                }

                videoBlock.appendChild(clipsContainer);
                outputDiv.appendChild(videoBlock);
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${err.message}`, 'error');
        }
    }

}


document.addEventListener('DOMContentLoaded', () => new DevPopup());

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\popup-dev.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\components\ControlSection.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\components\ControlSection.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\components\LogSection.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\components\LogSection.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\components\ResultsSection.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\components\ResultsSection.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\components\SettingsSection.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\popup-dev\components\SettingsSection.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\scenarios\ai-query-handler.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\scenarios\ai-query-handler.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\scenarios\ai-video-recommendation-scenario.js ===

// scenarios/ai-video-recommendation-scenario.js

import { logger } from '../background/background.js';
import { scrollPageNTimes } from '../core/utils/scroller.js';
import { parseAllVideoCards } from '../core/utils/parser.js';
import { formatVideoListForGPT, buildTop10ByTitlePrompt, parseGPTTop10Response } from '../core/utils/ai-utils.js';
import { askGPT } from '../ai/ai-service.js';
import { getProcessedTranscript } from '../ai/transcription-service.js';
import { evaluateVideo } from '../ai/gpt-evaluator.js';
import { getVideoClips, parseClips } from '../ai/clip-generator.js';

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: MM:SS –≤ —Å–µ–∫—É–Ω–¥—ã ---
function timeToSeconds(timeStr) {
    const [minutes, seconds] = timeStr.split(':').map(Number);
    return minutes * 60 + seconds;
}

export const aiVideoRecommendationScenario = {
    id: 'ai-video-recommendation',
    name: 'AI: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É',
    description: '–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: —Å–∫—Ä–æ–ª–ª -> –ø–∞—Ä—Å–∏–Ω–≥ -> GPT-—Ç–æ–ø10 -> —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è -> –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ -> –Ω–∞—Ä–µ–∑–∫–∏ -> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è.',
    async execute(context) {
        const { log, tabId, params, abortSignal } = context;
        const userQuery = params?.userQuery?.trim();

        if (!userQuery) {
            throw new Error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏.");
        }

        log(`üöÄ –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: ${this.name}`, { module: 'AIRecommendationScenario' });
        log(`üìù –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userQuery}"`, { module: 'AIRecommendationScenario' });

        // --- –®–ê–ì 1: –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–∏–∂–¥—ã ---
        log(`üîç –®–∞–≥ 1: –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`, { module: 'AIRecommendationScenario' });
        await scrollPageNTimes(context, 32, 1000, 1000);
        log(`‚úÖ –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à—ë–Ω.`, { module: 'AIRecommendationScenario' });
        await abortSignal();

        // --- –®–ê–ì 2: –°–ø–∞—Ä—Å–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ ---
        log(`üîç –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ –≤–∏–¥–µ–æ...`, { module: 'AIRecommendationScenario' });
        const parseResponse = await parseAllVideoCards(context);
        if (parseResponse?.status !== 'success') {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ: ${parseResponse?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        const allVideos = parseResponse.data;
        log(`‚úÖ –®–∞–≥ 2 –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${allVideos.length}`, { module: 'AIRecommendationScenario' });
        await abortSignal();

        // --- –®–ê–ì 3: GPT ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ---
        log(`üîç –®–∞–≥ 3: GPT ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...`, { module: 'AIRecommendationScenario' });
        const videoList = formatVideoListForGPT(allVideos);
        if (!videoList) {
            throw new Error("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏).");
        }

        const prompt = buildTop10ByTitlePrompt(userQuery, videoList);
        const gptResponse = await askGPT(prompt);
        log(`üìã –û—Ç–≤–µ—Ç –æ—Ç GPT (—Å—ã—Ä–æ–π): ${gptResponse}`, { module: 'AIRecommendationScenario' });
        console.log("[AIRecommendationScenario] –û—Ç–≤–µ—Ç –æ—Ç GPT:", gptResponse);
        const top10Results = parseGPTTop10Response(gptResponse, allVideos);

        log(`‚úÖ –®–∞–≥ 3 –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ø-10: ${top10Results.length}`, { module: 'AIRecommendationScenario' });
        await abortSignal();

        // --- –®–ê–ì 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ç–æ–ø-10 ---
        log(`üîç –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ç–æ–ø-10 –≤–∏–¥–µ–æ...`, { module: 'AIRecommendationScenario' });
        const transcriptResults = [];
        for (const video of top10Results) {
            const { title, videoId } = video;
            log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è: "${title}" (ID: ${videoId})`, { module: 'AIRecommendationScenario' });
            try {
                const chunks = await getProcessedTranscript(videoId);
                transcriptResults.push({ title, videoId, transcript: chunks.map((t, i) => ({ chunk: i + 1, chunk_text: t })) });
                log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è "${title}" –≥–æ—Ç–æ–≤–∞ (${chunks.length} —á–∞–Ω–∫–æ–≤).`, { module: 'AIRecommendationScenario' });
            } catch (err) {
                log(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è "${title}": ${err.message}`, { module: 'AIRecommendationScenario' });
            }
            await abortSignal();
        }
        log(`‚úÖ –®–∞–≥ 4 –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: ${transcriptResults.length}`, { module: 'AIRecommendationScenario' });

        // --- –®–ê–ì 5: GPT ‚Äî –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ ---
        log(`üîç –®–∞–≥ 5: GPT ‚Äî –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ...`, { module: 'AIRecommendationScenario' });
        const evalResults = [];
        for (const video of transcriptResults) {
            const { title, videoId, transcript } = video;
            log(`üìù –û—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ: "${title}"`, { module: 'AIRecommendationScenario' });
            try {
                const firstChunk = transcript?.[0]?.chunk_text || '';
                const inputForGPT = {
                    title,
                    duration: '00:00', // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º
                    initialScore: 8, // –£—Å–ª–æ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                    transcript: [{ chunk: 1, chunk_text: firstChunk }]
                };
                const { revisedScore, summary } = await evaluateVideo(userQuery, inputForGPT);

                evalResults.push({
                    title,
                    videoId,
                    revisedScore,
                    summary
                });

                log(`‚úÖ –í–∏–¥–µ–æ "${title}" –æ—Ü–µ–Ω–µ–Ω–æ: ${revisedScore}`, { module: 'AIRecommendationScenario' });
            } catch (err) {
                log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è "${title}": ${err.message}`, { module: 'AIRecommendationScenario' });
            }
            await abortSignal();
        }
        log(`‚úÖ –®–∞–≥ 5 –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ü–µ–Ω–æ–∫: ${evalResults.length}`, { module: 'AIRecommendationScenario' });

        // --- –®–ê–ì 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è —Ç–æ–ø-3 –ø–æ –æ—Ü–µ–Ω–∫–µ ---
        log(`üîç –®–∞–≥ 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è —Ç–æ–ø-3 –≤–∏–¥–µ–æ...`, { module: 'AIRecommendationScenario' });
        const top3Eval = [...evalResults].sort((a, b) => b.revisedScore - a.revisedScore).slice(0, 3);

        const clipResults = [];
        for (const video of top3Eval) {
            const { title, videoId, revisedScore } = video;
            log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ: "${title}" (ID: ${videoId})`, { module: 'AIRecommendationScenario' });

            // –ù–∞–π–¥—ë–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
            const videoTranscript = transcriptResults.find(v => v.videoId === videoId);
            if (!videoTranscript) {
                log(`‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ: ${videoId}`, { module: 'AIRecommendationScenario' });
                continue;
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —á–∞–Ω–∫–æ–≤ 1, 3, 6 (0, 2, 5 –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö)
            const chunksToUse = [0, 2, 5].map(i => videoTranscript.transcript[i]?.chunk_text).filter(Boolean);
            const fullTranscript = chunksToUse.join(' ');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
            const gptClipResponse = await getVideoClips(userQuery, fullTranscript);
            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const clips = parseClips(gptClipResponse);

            clipResults.push({
                title,
                videoId,
                score: revisedScore,
                clips
            });

            log(`‚úÖ –ù–∞—Ä–µ–∑–∫–∏ –¥–ª—è "${title}" –≥–æ—Ç–æ–≤—ã (${clips.length} —à—Ç.).`, { module: 'AIRecommendationScenario' });
            await abortSignal();
        }
        log(`‚úÖ –®–∞–≥ 6 –∑–∞–≤–µ—Ä—à—ë–Ω. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Ä–µ–∑–æ–∫: ${clipResults.length}`, { module: 'AIRecommendationScenario' });

        // --- –®–ê–ì 7: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Ä–µ–∑–æ–∫ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è popup) ---
        log(`üîç –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ popup...`, { module: 'AIRecommendationScenario' });

        // –°–æ—Ö—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ chrome.storage.local
        await chrome.storage.local.set({ 'aiScenarioResults': clipResults });

        // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ popup, —á—Ç–æ–±—ã –æ–Ω –æ–±–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        // –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ chrome.runtime.sendMessage, –µ—Å–ª–∏ popup –æ—Ç–∫—Ä—ã—Ç
        // –∏–ª–∏ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ storage, –∫–æ—Ç–æ—Ä–æ–µ popup –º–æ–∂–µ—Ç —Å–ª—É—à–∞—Ç—å
        log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ storage.`, { module: 'AIRecommendationScenario' });

        log(`üéâ –°—Ü–µ–Ω–∞—Ä–∏–π "${this.name}" –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.`, { module: 'AIRecommendationScenario' });
    }
};

=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\scenarios\ai-video-recommendation-scenario.js ===

--------------------------------------------------------------------------------

=== START FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\scenarios\parse-recommendation.js ===



=== END FILE: D:\—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\ai-youtube-assistant\ai-youtube-assistant\scenarios\parse-recommendation.js ===

--------------------------------------------------------------------------------
