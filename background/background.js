// background/background.js

// 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Logger –∏ –∞–¥–∞–ø—Ç–µ—Ä
import { Logger } from '../core/logger.js';
import { ChromeStorageLogAdapter } from '../adapters/ChromeStorageLogAdapter.js';
import { scrollPageNTimes } from '../core/utils/scroller.js';
import { parseAllVideoCards } from '../core/utils/parser.js';
import { askGPT } from '../ai/ai-service.js';
// 2. –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const logger = new Logger({
    maxSize: 1000,
    enableConsole: true,
    defaultLevel: 'info'
});

// 3. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ConsoleLogAdapter
// import { ConsoleLogAdapter } from '../adapters/ConsoleLogAdapter.js';
// logger.addAdapter(new ConsoleLogAdapter());

// 4. –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∑–∞–ø—É—Å–∫–∞ background
logger.info("üöÄ Background service worker –∑–∞–ø—É—â–µ–Ω.", { module: 'Background' });

// 5. –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup –∏ content
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤ –∏–∑ content-—Å–∫—Ä–∏–ø—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    if (request.type === "contentLog") {
        logger.log(
            request.message,
            request.level || 'info',
            {
                module: request.module || 'ContentScript',
            }
        );
        return false;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
    if (request.action === "clearLog") {
        logger.clear().then(() => {
            sendResponse({ status: "success" });
        });
        return true;
    }

    // background/background.js ‚Üí –≤–Ω—É—Ç—Ä–∏ chrome.runtime.onMessage.addListener

    if (request.action === "runScrollStep") {
        (async () => {
            try {
                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ content script ---
                try {
                    await chrome.tabs.sendMessage(tabId, { action: "ping" });
                } catch (pingErr) {
                    throw new Error("Content script –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É YouTube.");
                }

                // --- 4. –°–æ–∑–¥–∞—ë–º –ö–û–†–†–ï–ö–¢–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å AbortController ---
                const controller = new AbortController();
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'ScrollStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    // üëá –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è abortSignal
                    abortSignal: async () => {
                        if (controller.signal.aborted) {
                            throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
                        }
                        // –ï—Å–ª–∏ –Ω–µ aborted ‚Äî –ø—Ä–æ–º–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                        return Promise.resolve();
                    },
                    // üëá –ü–µ—Ä–µ–¥–∞—ë–º controller, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å controller.abort()
                    controller
                };

                await scrollPageNTimes(
                    tempContext,
                    request.params.count || 5,
                    request.params.delayMs || 1000,
                    request.params.step || 1000
                );

                sendResponse({ status: "success" });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ —Å–∫—Ä–æ–ª–ª–∞: ${errorMsg}`, { module: 'ScrollStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runParseVideosStep") {
        (async () => {
            try {
                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'ParseVideosStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    abortSignal: async () => { },
                    controller: { signal: { aborted: false } }
                };

                // --- 4. –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
                const response = await parseAllVideoCards(tempContext);

                if (response?.status === 'success') {
                    sendResponse({ status: "success", data: response.data });
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ parseAllVideoCards');
                }
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ: ${errorMsg}`, { module: 'ParseVideosStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runGPTAnalyzeStep") {
        (async () => {
            try {
                const userQuery = request.params?.userQuery?.trim();
                if (!userQuery) {
                    throw new Error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                }

                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'GPTAnalyzeStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    abortSignal: async () => { },
                    controller: { signal: { aborted: false } }
                };

                // --- 4. –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é ---
                const parseResponse = await parseAllVideoCards(tempContext);

                if (parseResponse?.status !== 'success') {
                    throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ: ${parseResponse?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                }

                const videos = parseResponse.data;

                // --- 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ "–ù–∞–∑–≤–∞–Ω–∏–µ;–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" ---
                const videoList = videos
                    .filter(v => v.title && v.duration && v.duration !== '‚Äî')
                    .map(v => `${v.title};${v.duration}`)
                    .join('\n');

                if (!videoList) {
                    throw new Error("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏).");
                }
                console.log(videoList);
                console.log(userQuery);
                // --- 6. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç ---
                const prompt = `you are a precise video-matching assistant. Your input consists of two parts: (1) a user request and (2) a list of available videos in CSV format "Video Title;Duration", where Duration is in HH:MM:SS. First, analyze the user request to determine the topic/intent (e.g., relaxing content, tech news, aviation) and check if the user mentions available viewing time (e.g., "I have 1 hour"). If time is specified, convert it to total seconds and exclude any video whose duration exceeds that time (allow ¬±2 minutes tolerance). If no time is mentioned, do not filter by duration. For each remaining video, assess how well its title matches the user's topic/intent and assign a relevance score from 0.0 (completely unrelated) to 1.0 (perfect match), based only on the title‚Äîdo not assume content beyond what the title states. Only include videos with relevance score ‚â• 0.4. If no videos meet both relevance and duration criteria, output exactly: No such videos available. Otherwise, output a markdown table with two columns: "Video Title" (exact title from input) and "Relevance Score" (rounded to two decimal places). Do not include durations in the output, and do not add any extra text, explanations, or formatting beyond the table. Use this exact format: Video Title;Relevance Score
–í—ã–≤–æ–¥–∏ –Ω–µ –±–æ–ª–µ–µ 10 –Ω–∞–∑–≤–∞–Ω–∏–π, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ relevance score –ø–æ —É–±—ã–≤–∞–Ω–∏—é
User request: ${userQuery}
Available videos: ${videoList}`;

                // --- 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API —á–µ—Ä–µ–∑ ai-service ---
                const gptResult = await askGPT(prompt);

                logger.info(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GPT: ${gptResult}`, { module: 'GPTAnalyzeStep' });

                sendResponse({ status: "success", result: gptResult });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ GPT-–∞–Ω–∞–ª–∏–∑–∞: ${errorMsg}`, { module: 'GPTAnalyzeStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –ø–æ –º–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
});