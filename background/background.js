// background/background.js

// 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Logger –∏ –∞–¥–∞–ø—Ç–µ—Ä
import { Logger } from '../core/logger.js';
import { ChromeStorageLogAdapter } from '../adapters/ChromeStorageLogAdapter.js';
import { scrollPageNTimes } from '../core/utils/scroller.js';
import { parseAllVideoCards } from '../core/utils/parser.js';
import { askGPT } from '../ai/ai-service.js';
import { getProcessedTranscript } from '../ai/transcription-service.js';
import { formatVideoListForGPT, buildTop10ByTitlePrompt, parseGPTTop10Response } from '../core/utils/ai-utils.js';

// 2. –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const logger = new Logger({
    maxSize: 1000,
    enableConsole: true,
    defaultLevel: 'info'
});

// 3. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ConsoleLogAdapter
// import { ConsoleLogAdapter } from '../adapters/ConsoleLogAdapter.js';
// logger.addAdapter(new ConsoleLogAdapter());

// 4. –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∑–∞–ø—É—Å–∫–∞ background
logger.info("üöÄ Background service worker –∑–∞–ø—É—â–µ–Ω.", { module: 'Background' });

// 5. –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup –∏ content
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤ –∏–∑ content-—Å–∫—Ä–∏–ø—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    if (request.type === "contentLog") {
        logger.log(
            request.message,
            request.level || 'info',
            {
                module: request.module || 'ContentScript',
            }
        );
        return false;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
    if (request.action === "clearLog") {
        logger.clear().then(() => {
            sendResponse({ status: "success" });
        });
        return true;
    }

    // background/background.js ‚Üí –≤–Ω—É—Ç—Ä–∏ chrome.runtime.onMessage.addListener

    if (request.action === "runScrollStep") {
        (async () => {
            try {
                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ content script ---
                try {
                    await chrome.tabs.sendMessage(tabId, { action: "ping" });
                } catch (pingErr) {
                    throw new Error("Content script –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É YouTube.");
                }

                // --- 4. –°–æ–∑–¥–∞—ë–º –ö–û–†–†–ï–ö–¢–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å AbortController ---
                const controller = new AbortController();
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'ScrollStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    // üëá –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è abortSignal
                    abortSignal: async () => {
                        if (controller.signal.aborted) {
                            throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
                        }
                        // –ï—Å–ª–∏ –Ω–µ aborted ‚Äî –ø—Ä–æ–º–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                        return Promise.resolve();
                    },
                    // üëá –ü–µ—Ä–µ–¥–∞—ë–º controller, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å controller.abort()
                    controller
                };

                await scrollPageNTimes(
                    tempContext,
                    request.params.count || 5,
                    request.params.delayMs || 1000,
                    request.params.step || 1000
                );

                sendResponse({ status: "success" });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ —Å–∫—Ä–æ–ª–ª–∞: ${errorMsg}`, { module: 'ScrollStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runParseVideosStep") {
        (async () => {
            try {
                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'ParseVideosStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    abortSignal: async () => { },
                    controller: { signal: { aborted: false } }
                };

                // --- 4. –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
                const response = await parseAllVideoCards(tempContext);

                if (response?.status === 'success') {
                    sendResponse({ status: "success", data: response.data });
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ parseAllVideoCards');
                }
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ: ${errorMsg}`, { module: 'ParseVideosStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runGPTGetTop10ByTitleStep") { // üëà –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è
        (async () => {
            try {
                const userQuery = request.params?.userQuery?.trim();
                if (!userQuery) {
                    throw new Error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                }

                // --- 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ---
                const activeTabs = await chrome.tabs.query({ active: true, currentWindow: true });
                if (activeTabs.length === 0) {
                    throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                const tab = activeTabs[0];
                const tabId = tab.id;

                // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube ---
                if (!tab.url || !tab.url.includes('youtube.com')) {
                    throw new Error(`–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube: ${tab.url || 'URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                }

                // --- 3. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
                const tempContext = {
                    log: (msg, opts = {}) => logger.log(msg, opts.level || 'info', { module: 'GPTGetTop10ByTitleStep', ...opts }),
                    tabId,
                    params: request.params || {},
                    abortSignal: async () => { },
                    controller: { signal: { aborted: false } }
                };

                // --- 4. –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é ---
                const parseResponse = await parseAllVideoCards(tempContext);

                if (parseResponse?.status !== 'success') {
                    throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ: ${parseResponse?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                }

                const videos = parseResponse.data;

                // --- 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ "–ù–∞–∑–≤–∞–Ω–∏–µ;–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É ---
                const videoList = formatVideoListForGPT(videos);

                if (!videoList) {
                    throw new Error("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏).");
                }

                // --- 6. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É ---
                const prompt = buildTop10ByTitlePrompt(userQuery, videoList);

                // --- 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API —á–µ—Ä–µ–∑ ai-service ---
                const gptResponse = await askGPT(prompt);

                // --- 8. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT ---
                const top10Results = parseGPTTop10Response(gptResponse, videos);

                logger.info(`‚úÖ –¢–æ–ø-10 –≤–∏–¥–µ–æ –æ—Ç GPT:`, { module: 'GPTGetTop10ByTitleStep', data: top10Results });

                sendResponse({ status: "success", data: top10Results });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-10 –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: ${errorMsg}`, { module: 'GPTGetTop10ByTitleStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    if (request.action === "runTranscriptionStep") {
        (async () => {
            try {
                const top10Json = request.params?.top10Json?.trim();
                if (!top10Json) {
                    throw new Error("–ü—É—Å—Ç–æ–π JSON —Å —Ç–æ–ø-10 –≤–∏–¥–µ–æ.");
                }

                let top10Data;
                try {
                    top10Data = JSON.parse(top10Json);
                } catch (e) {
                    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Å —Ç–æ–ø-10 –≤–∏–¥–µ–æ.");
                }

                if (!Array.isArray(top10Data)) {
                    throw new Error("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–∏–¥–µ–æ.");
                }

                logger.info(`üé¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è ${top10Data.length} –≤–∏–¥–µ–æ...`, { module: 'TranscriptionStep' });

                const results = [];

                for (const video of top10Data) {
                    const { title, videoId } = video;
                    if (!title || !videoId) {
                        logger.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–∏–¥–µ–æ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ ID: ${JSON.stringify(video)}`, { module: 'TranscriptionStep' });
                        continue;
                    }

                    logger.info(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è: "${title}" (ID: ${videoId})`, { module: 'TranscriptionStep' });

                    try {
                        const chunks = await getProcessedTranscript(videoId);
                        results.push({ title, chunks });
                        logger.success(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è "${title}" –≥–æ—Ç–æ–≤–∞ (${chunks.length} —á–∞–Ω–∫–æ–≤).`, { module: 'TranscriptionStep' });
                    } catch (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è "${title}": ${err.message}`, { module: 'TranscriptionStep' });
                    }
                }

                logger.success(`üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`, { module: 'TranscriptionStep' });

                sendResponse({ status: "success", results });
            } catch (err) {
                const errorMsg = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${errorMsg}`, { module: 'TranscriptionStep' });
                sendResponse({ status: "error", message: errorMsg });
            }
        })();
        return true;
    }

    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –ø–æ –º–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
});