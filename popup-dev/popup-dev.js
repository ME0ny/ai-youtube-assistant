
function timeToSeconds(timeStr) {
    const [minutes, seconds] = timeStr.split(':').map(Number);
    return minutes * 60 + seconds;
}

class DevPopup {
    constructor() {
        this.isRunning = false;
        this.initElements();
        this.bindEvents();
        this.listenToBackground();
    }

    initElements() {
        this.scenarioSelect = document.getElementById('scenarioSelect');
        this.stepSelect = document.getElementById('stepSelect');
        this.runScenarioBtn = document.getElementById('runScenarioBtn');
        this.stopScenarioBtn = document.getElementById('stopScenarioBtn');
        this.runStepBtn = document.getElementById('runStepBtn');
        this.clearLogBtn = document.getElementById('clearLogBtn');
        this.logContainer = document.getElementById('logContainer');
    }

    bindEvents() {
        this.runScenarioBtn.addEventListener('click', () => this.runScenario());
        this.stopScenarioBtn.addEventListener('click', () => this.stopScenario());
        this.runStepBtn.addEventListener('click', () => this.runStep());
        this.clearLogBtn.addEventListener('click', () => this.clearLog());
    }

    async runScenario() {
        const scenarioId = this.scenarioSelect.value;
        this.log(`üì§ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioId}`);
        this.setRunning(true);
        try {
            const response = await chrome.runtime.sendMessage({
                action: 'runScenario',
                scenarioId,
                params: { devMode: true }
            });
            if (response?.status === 'started') {
                this.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω (ID: ${response.instanceId})`);
            } else {
                throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}`, 'error');
            this.setRunning(false);
        }
    }

    async stopScenario() {
        this.log('üì§ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
        try {
            const response = await chrome.runtime.sendMessage({ action: 'stopAllScenarios' });
            if (response?.status === 'success') {
                this.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'warn');
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${err.message}`, 'error');
        } finally {
            this.setRunning(false);
        }
    }

    // popup-dev/popup-dev.js ‚Üí –º–µ—Ç–æ–¥ runStep()
    async runStep() {
        const stepId = this.stepSelect.value;
        const scenarioId = this.scenarioSelect.value;

        if (stepId === 'step-scroll') {
            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runScrollStep",
                    params: {
                        count: 10,      // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–æ–ª–ª–æ–≤
                        delayMs: 500, // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫—Ä–æ–ª–ª–∞–º–∏
                        step: 1000     // –ø–∏–∫—Å–µ–ª–µ–π –∑–∞ —Ä–∞–∑
                    }
                });
                if (response?.status === 'success') {
                    this.log(`‚úÖ –°–∫—Ä–æ–ª–ª –∑–∞–≤–µ—Ä—à—ë–Ω`);
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∞: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-parse-videos') {
            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∏–¥–µ–æ...`);
            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runParseVideosStep" // ‚Üê –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π action
                });
                if (response?.status === 'success') {
                    const count = response.data.length;
                    this.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${count} –≤–∏–¥–µ–æ.`, 'success');
                    console.table(response.data); // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-gpt-get-top10-by-title') {
            const userQuery = document.getElementById('userQueryInput').value.trim();
            if (!userQuery) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: GPT ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...`, 'info');
            this.log(`üìù –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userQuery}"`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runGPTGetTop10ByTitleStep", // üëà –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è
                    params: { userQuery }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –¢–æ–ø-10 –≤–∏–¥–µ–æ –æ—Ç GPT:`, 'success');
                    console.table(response.data); // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É
                    for (const item of response.data) {
                        this.log(`${item.title};${item.videoId};${item.relevanceScore10}`, 'info');
                    }
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-10: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-transcription') {
            const top10Json = document.getElementById('top10JsonInput').value.trim();
            if (!top10Json) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å —Ç–æ–ø-10 –≤–∏–¥–µ–æ.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runTranscriptionStep",
                    params: { top10Json }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:`, 'success');

                    // --- –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ ---
                    const output = response.results.map(item => {
                        const transcript = item.chunks.map((chunkText, index) => ({
                            chunk: index + 1,
                            chunk_text: chunkText
                        }));

                        return {
                            title: item.title,
                            videoID: item.videoId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º videoId –∏–∑ top10Json
                            transcript
                        };
                    });

                    console.group('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∏–∂–µ):');
                    console.table(output); // –í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                    console.groupEnd();

                    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç
                    console.log('üìã –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):');
                    console.log(JSON.stringify(output, null, 2));

                    // –í—ã–≤–æ–¥–∏–º –≤ –∂—É—Ä–Ω–∞–ª popup
                    this.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: ${output.length}`, 'info');
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-gpt-deep-eval') {
            const userQuery = document.getElementById('userQueryInput').value.trim();
            if (!userQuery) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, 'error');
                return;
            }

            const videoJson = document.getElementById('videoTranscriptJsonInput').value.trim();
            if (!videoJson) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å –≤–∏–¥–µ–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: GPT ‚Äî –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ...`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runGPTDeepEvalStep",
                    params: { userQuery, videoJson }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏:`, 'success');

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    const output = response.results.map(item => [
                        item.title,
                        item.videoId,
                        item.revisedScore,
                        item.summary
                    ]);

                    console.group('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∏–∂–µ):');
                    console.table(output);
                    console.groupEnd();

                    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç
                    console.log('üìã –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):');
                    console.log(JSON.stringify(output, null, 2));

                    this.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: ${output.length}`, 'info');
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-clip-generation') {
            const userQuery = document.getElementById('userQueryInput').value.trim();
            if (!userQuery) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, 'error');
                return;
            }

            const transcriptJson = document.getElementById('videoTranscriptJsonInput').value.trim();
            if (!transcriptJson) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π.`, 'error');
                return;
            }

            const deepEvalJson = document.getElementById('deepEvalJsonInput').value.trim();
            if (!deepEvalJson) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫...`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runClipGenerationStep",
                    params: { userQuery, transcriptJson, deepEvalJson }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ä–µ–∑–æ–∫:`, 'success');

                    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                    console.group('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ä–µ–∑–æ–∫ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∏–∂–µ):');
                    console.table(response.results);
                    console.groupEnd();

                    console.log('üìã –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):');
                    console.log(JSON.stringify(response.results, null, 2));

                    // –í—ã–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ videoClipsOutput
                    const outputDiv = document.getElementById('videoClipsOutput');
                    outputDiv.innerHTML = '';

                    for (const item of response.results) {
                        const videoBlock = document.createElement('div');
                        videoBlock.className = 'video-block';

                        const titleLink = document.createElement('a');
                        titleLink.href = `https://www.youtube.com/watch?v=${item.videoId}`;
                        titleLink.target = '_blank';
                        titleLink.textContent = `${item.title} - ${item.score}`;
                        titleLink.className = 'video-title-link';

                        videoBlock.appendChild(titleLink);

                        const clipsList = document.createElement('ul');
                        clipsList.className = 'clips-list';

                        for (const clip of item.clips) {
                            const clipItem = document.createElement('li');
                            clipItem.className = 'clip-item';

                            const timeLink = document.createElement('a');
                            timeLink.href = `https://www.youtube.com/watch?v=${item.videoId}&t=${timeToSeconds(clip.start)}s`;
                            timeLink.target = '_blank';
                            timeLink.textContent = `${clip.title} (${clip.start} - ${clip.end})`;
                            timeLink.className = 'clip-link';

                            clipItem.appendChild(timeLink);
                            clipsList.appendChild(clipItem);
                        }

                        videoBlock.appendChild(clipsList);
                        outputDiv.appendChild(videoBlock);
                    }

                    this.log(`–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Ä–µ–∑–æ–∫: ${response.results.length}`, 'info');
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ä–µ–∑–æ–∫: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-display-clips') {
            const clipsJson = document.getElementById('clipsJsonInput').value.trim();
            if (!clipsJson) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π JSON —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –í—ã–≤–æ–¥ –Ω–∞—Ä–µ–∑–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...`, 'info');

            try {
                const clipsData = JSON.parse(clipsJson);
                if (!Array.isArray(clipsData)) {
                    throw new Error("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏.");
                }

                // –í—ã–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ videoClipsOutput
                const outputDiv = document.getElementById('videoClipsOutput');
                outputDiv.innerHTML = '';

                for (const item of clipsData) {
                    const videoBlock = document.createElement('div');
                    videoBlock.className = 'video-block';

                    // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ (—Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube)
                    const titleLink = document.createElement('a');
                    titleLink.href = `https://www.youtube.com/watch?v=${item.videoId}`;
                    titleLink.target = '_blank';
                    titleLink.textContent = `${item.title} (–û—Ü–µ–Ω–∫–∞: ${item.score})`;
                    titleLink.className = 'video-title-link';

                    videoBlock.appendChild(titleLink);

                    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞—Ä–µ–∑–æ–∫
                    const clipsContainer = document.createElement('div');
                    clipsContainer.className = 'clips-container';

                    for (const clip of item.clips) {
                        const clipBlock = document.createElement('div');
                        clipBlock.className = 'clip-block';

                        // –ü–ª–µ–µ—Ä YouTube —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
                        const startTimeSec = timeToSeconds(clip.start);
                        const endTimeSec = timeToSeconds(clip.end);

                        const iframe = document.createElement('iframe');
                        iframe.width = '320';
                        iframe.height = '180';
                        iframe.src = `https://www.youtube.com/embed/${item.videoId}?start=${startTimeSec}&end=${endTimeSec}&autoplay=0`;
                        iframe.frameBorder = '0';
                        iframe.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';
                        iframe.allowFullscreen = true;

                        clipBlock.appendChild(iframe);

                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä–µ–∑–∫–µ
                        const clipInfo = document.createElement('div');
                        clipInfo.className = 'clip-info';
                        clipInfo.textContent = `${clip.title} (${clip.start} - ${clip.end})`;
                        clipBlock.appendChild(clipInfo);

                        clipsContainer.appendChild(clipBlock);
                    }

                    videoBlock.appendChild(clipsContainer);
                    outputDiv.appendChild(videoBlock);
                }

                this.log(`‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ ${clipsData.length} –≤–∏–¥–µ–æ —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏.`, 'success');
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –Ω–∞—Ä–µ–∑–æ–∫: ${err.message}`, 'error');
            }
            return;
        }
        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
    }

    clearLog() {
        this.logContainer.innerHTML = '<div class="log-placeholder">–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç</div>';
    }

    log(message, level = 'info') {
        const placeholder = this.logContainer.querySelector('.log-placeholder');
        if (placeholder) placeholder.remove();

        const entry = document.createElement('div');
        entry.className = `log-entry log-${level}`;
        const time = new Date().toLocaleTimeString();
        entry.textContent = `[${time}] ${message}`;
        this.logContainer.appendChild(entry);
        this.logContainer.scrollTop = this.logContainer.scrollHeight;
    }

    setRunning(isRunning) {
        this.isRunning = isRunning;
        this.runScenarioBtn.disabled = isRunning;
        this.stopScenarioBtn.disabled = !isRunning;
        this.runStepBtn.disabled = isRunning; // –±–ª–æ–∫–∏—Ä—É–µ–º —à–∞–≥–∏ –≤–æ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    }

    listenToBackground() {
        chrome.runtime.onMessage.addListener((request) => {
            if (request.type === 'newLog' && request.log) {
                this.log(request.log.message, request.log.level || 'info');
            }
            if (request.type === 'scenarioStatus') {
                if (request.status === 'stopped' || request.status === 'finished') {
                    this.setRunning(false);
                }
            }
            if (request.type === 'logsCleared') {
                this.clearLog();
            }
        });
    }

}


document.addEventListener('DOMContentLoaded', () => new DevPopup());