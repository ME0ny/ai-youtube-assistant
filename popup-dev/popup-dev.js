class DevPopup {
    constructor() {
        this.isRunning = false;
        this.initElements();
        this.bindEvents();
        this.listenToBackground();
    }

    initElements() {
        this.scenarioSelect = document.getElementById('scenarioSelect');
        this.stepSelect = document.getElementById('stepSelect');
        this.runScenarioBtn = document.getElementById('runScenarioBtn');
        this.stopScenarioBtn = document.getElementById('stopScenarioBtn');
        this.runStepBtn = document.getElementById('runStepBtn');
        this.clearLogBtn = document.getElementById('clearLogBtn');
        this.logContainer = document.getElementById('logContainer');
    }

    bindEvents() {
        this.runScenarioBtn.addEventListener('click', () => this.runScenario());
        this.stopScenarioBtn.addEventListener('click', () => this.stopScenario());
        this.runStepBtn.addEventListener('click', () => this.runStep());
        this.clearLogBtn.addEventListener('click', () => this.clearLog());
    }

    async runScenario() {
        const scenarioId = this.scenarioSelect.value;
        this.log(`üì§ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioId}`);
        this.setRunning(true);
        try {
            const response = await chrome.runtime.sendMessage({
                action: 'runScenario',
                scenarioId,
                params: { devMode: true }
            });
            if (response?.status === 'started') {
                this.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω (ID: ${response.instanceId})`);
            } else {
                throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}`, 'error');
            this.setRunning(false);
        }
    }

    async stopScenario() {
        this.log('üì§ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
        try {
            const response = await chrome.runtime.sendMessage({ action: 'stopAllScenarios' });
            if (response?.status === 'success') {
                this.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'warn');
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${err.message}`, 'error');
        } finally {
            this.setRunning(false);
        }
    }

    async runStep() {
        const stepId = this.stepSelect.value;
        const scenarioId = this.scenarioSelect.value;
        this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ "${stepId}" –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioId}"`);
        try {
            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π action: "runStep"
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ª–æ–≥
            await chrome.runtime.sendMessage({
                action: 'runStep',
                scenarioId,
                stepId
            });
            this.log(`‚úÖ –≠—Ç–∞–ø "${stepId}" –∑–∞–≤–µ—Ä—à—ë–Ω`);
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞: ${err.message}`, 'error');
        }
    }

    clearLog() {
        this.logContainer.innerHTML = '<div class="log-placeholder">–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç</div>';
    }

    log(message, level = 'info') {
        const placeholder = this.logContainer.querySelector('.log-placeholder');
        if (placeholder) placeholder.remove();

        const entry = document.createElement('div');
        entry.className = `log-entry log-${level}`;
        const time = new Date().toLocaleTimeString();
        entry.textContent = `[${time}] ${message}`;
        this.logContainer.appendChild(entry);
        this.logContainer.scrollTop = this.logContainer.scrollHeight;
    }

    setRunning(isRunning) {
        this.isRunning = isRunning;
        this.runScenarioBtn.disabled = isRunning;
        this.stopScenarioBtn.disabled = !isRunning;
        this.runStepBtn.disabled = isRunning; // –±–ª–æ–∫–∏—Ä—É–µ–º —à–∞–≥–∏ –≤–æ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    }

    listenToBackground() {
        chrome.runtime.onMessage.addListener((request) => {
            if (request.type === 'newLog' && request.log) {
                this.log(request.log.message, request.log.level || 'info');
            }
            if (request.type === 'scenarioStatus') {
                if (request.status === 'stopped' || request.status === 'finished') {
                    this.setRunning(false);
                }
            }
            if (request.type === 'logsCleared') {
                this.clearLog();
            }
        });
    }
}

document.addEventListener('DOMContentLoaded', () => new DevPopup());