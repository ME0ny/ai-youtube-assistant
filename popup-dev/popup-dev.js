class DevPopup {
    constructor() {
        this.isRunning = false;
        this.initElements();
        this.bindEvents();
        this.listenToBackground();
    }

    initElements() {
        this.scenarioSelect = document.getElementById('scenarioSelect');
        this.stepSelect = document.getElementById('stepSelect');
        this.runScenarioBtn = document.getElementById('runScenarioBtn');
        this.stopScenarioBtn = document.getElementById('stopScenarioBtn');
        this.runStepBtn = document.getElementById('runStepBtn');
        this.clearLogBtn = document.getElementById('clearLogBtn');
        this.logContainer = document.getElementById('logContainer');
    }

    bindEvents() {
        this.runScenarioBtn.addEventListener('click', () => this.runScenario());
        this.stopScenarioBtn.addEventListener('click', () => this.stopScenario());
        this.runStepBtn.addEventListener('click', () => this.runStep());
        this.clearLogBtn.addEventListener('click', () => this.clearLog());
    }

    async runScenario() {
        const scenarioId = this.scenarioSelect.value;
        this.log(`üì§ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioId}`);
        this.setRunning(true);
        try {
            const response = await chrome.runtime.sendMessage({
                action: 'runScenario',
                scenarioId,
                params: { devMode: true }
            });
            if (response?.status === 'started') {
                this.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω (ID: ${response.instanceId})`);
            } else {
                throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}`, 'error');
            this.setRunning(false);
        }
    }

    async stopScenario() {
        this.log('üì§ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
        try {
            const response = await chrome.runtime.sendMessage({ action: 'stopAllScenarios' });
            if (response?.status === 'success') {
                this.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'warn');
            }
        } catch (err) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${err.message}`, 'error');
        } finally {
            this.setRunning(false);
        }
    }

    // popup-dev/popup-dev.js ‚Üí –º–µ—Ç–æ–¥ runStep()
    async runStep() {
        const stepId = this.stepSelect.value;
        const scenarioId = this.scenarioSelect.value;

        if (stepId === 'step-scroll') {
            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runScrollStep",
                    params: {
                        count: 10,      // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–æ–ª–ª–æ–≤
                        delayMs: 500, // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫—Ä–æ–ª–ª–∞–º–∏
                        step: 1000     // –ø–∏–∫—Å–µ–ª–µ–π –∑–∞ —Ä–∞–∑
                    }
                });
                if (response?.status === 'success') {
                    this.log(`‚úÖ –°–∫—Ä–æ–ª–ª –∑–∞–≤–µ—Ä—à—ë–Ω`);
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∞: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-parse-videos') {
            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∏–¥–µ–æ...`);
            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runParseVideosStep" // ‚Üê –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π action
                });
                if (response?.status === 'success') {
                    const count = response.data.length;
                    this.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${count} –≤–∏–¥–µ–æ.`, 'success');
                    console.table(response.data); // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${err.message}`, 'error');
            }
            return;
        }

        if (stepId === 'step-gpt-analyze') {
            const userQuery = document.getElementById('userQueryInput').value.trim();
            if (!userQuery) {
                this.log(`‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, 'error');
                return;
            }

            this.log(`‚è≠Ô∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...`, 'info');
            this.log(`üìù –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userQuery}"`, 'info');

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "runGPTAnalyzeStep",
                    params: { userQuery }
                });

                if (response?.status === 'success') {
                    this.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GPT:`, 'success');
                    this.log(response.result, 'info');
                    console.log("–û—Ç–≤–µ—Ç –æ—Ç GPT:", response.result);
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ GPT-–∞–Ω–∞–ª–∏–∑–∞: ${err.message}`, 'error');
            }
            return;
        }

        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
    }

    clearLog() {
        this.logContainer.innerHTML = '<div class="log-placeholder">–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç</div>';
    }

    log(message, level = 'info') {
        const placeholder = this.logContainer.querySelector('.log-placeholder');
        if (placeholder) placeholder.remove();

        const entry = document.createElement('div');
        entry.className = `log-entry log-${level}`;
        const time = new Date().toLocaleTimeString();
        entry.textContent = `[${time}] ${message}`;
        this.logContainer.appendChild(entry);
        this.logContainer.scrollTop = this.logContainer.scrollHeight;
    }

    setRunning(isRunning) {
        this.isRunning = isRunning;
        this.runScenarioBtn.disabled = isRunning;
        this.stopScenarioBtn.disabled = !isRunning;
        this.runStepBtn.disabled = isRunning; // –±–ª–æ–∫–∏—Ä—É–µ–º —à–∞–≥–∏ –≤–æ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    }

    listenToBackground() {
        chrome.runtime.onMessage.addListener((request) => {
            if (request.type === 'newLog' && request.log) {
                this.log(request.log.message, request.log.level || 'info');
            }
            if (request.type === 'scenarioStatus') {
                if (request.status === 'stopped' || request.status === 'finished') {
                    this.setRunning(false);
                }
            }
            if (request.type === 'logsCleared') {
                this.clearLog();
            }
        });
    }
}

document.addEventListener('DOMContentLoaded', () => new DevPopup());