// ai/clip-generator.js

import { askGPT } from './ai-service.js';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ GPT –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—Ä–µ–∑–æ–∫.
 * @param {string} userQuery - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} fullTranscript - –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
 * @returns {Promise<string>} –û—Ç–≤–µ—Ç GPT.
 */
export async function getVideoClips(userQuery, fullTranscript) {
    const prompt = `You are a skilled video content curator tasked with identifying the three most compelling short segments (each up to 2 minutes long) from a single YouTube video that best justify why this video is worth watching. These segments should function like engaging Shorts, Reels, or TikToks‚Äîself-contained, captivating, and clearly understandable on their own. Each segment must have a natural beginning and end, and fall into one of these categories: (1) a clear answer to an interesting or surprising question, (2) a concise personal or illustrative story, or (3) a focused, dynamic debate or exchange of contrasting viewpoints.  

Use the user‚Äôs original query to understand their intent and interests, then analyze the full transcript to locate the most relevant, high-impact moments that align with that intent. For each of the three selected segments, provide only the start time (in MM:SS format), end time (in MM:SS format), and a short, catchy title in Russian that captures the essence of the fragment. Do not include any additional explanation, commentary, or formatting‚Äîjust the three entries, each on a new line, in the exact format:  
Start: MM:SS ‚Äì End: MM:SS | –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º  

Here is the input you will receive:  
[User Query]: ${userQuery}
[Full Transcript]: ${fullTranscript}
Return only the three formatted lines‚Äînothing else.`;
    const response = await askGPT(prompt);
    console.log(`[ClipGenerator] üì• –û—Ç–≤–µ—Ç –æ—Ç GPT (—Å—ã—Ä–æ–π):`, response);
    return response;
}

/**
 * –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç GPT –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã MM:SS –∏ HH:MM:SS.
 * @param {string} gptResponse - –û—Ç–≤–µ—Ç GPT.
 * @returns {Array<{ start: string, end: string, title: string }>}
 */
export function parseClips(gptResponse) {
    console.log(`[ClipGenerator] üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT...`);
    const lines = gptResponse.split('\n').filter(l => l.trim() !== '');
    console.log(`[ClipGenerator] üìÑ –°—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:`, lines);

    const clips = [];
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ MM:SS –∏ HH:MM:SS
    const timePattern = /(\d{1,2}:\d{2}(?::\d{2})?)/; // –Ω–∞–ø—Ä–∏–º–µ—Ä: 5:30, 05:30, 00:05:30
    const fullPattern = new RegExp(
        `^\\s*Start:\\s*${timePattern.source}\\s*‚Äì\\s*End:\\s*${timePattern.source}\\s*\\|\\s*(.+?)\\s*$`,
        'i'
    );

    for (const line of lines) {
        const match = line.match(fullPattern);
        if (match) {
            const start = normalizeTime(match[1]); // match[1] = start
            const end = normalizeTime(match[2]);   // match[2] = end
            const title = match[3].trim();         // match[3] = title
            clips.push({ start, end, title });
            console.log(`[ClipGenerator] ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –Ω–∞—Ä–µ–∑–∫–∞: ${start} ‚Äì ${end} | ${title}`);
        } else {
            console.warn(`[ClipGenerator] ‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: "${line}"`);
        }
    }

    console.log(`[ClipGenerator] üéØ –ò—Ç–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞—Ä–µ–∑–æ–∫: ${clips.length}`);
    return clips;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç MM:SS (—É–¥–∞–ª—è–µ—Ç —á–∞—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ 00).
 * @param {string} timeStr - –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS –∏–ª–∏ MM:SS
 * @returns {string} –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS
 */
function normalizeTime(timeStr) {
    const parts = timeStr.split(':').map(Number);
    if (parts.length === 3) {
        // HH:MM:SS ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ 0
        const [h, m, s] = parts;
        if (h === 0) {
            return `${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
        } else {
            // –ï—Å–ª–∏ —á–∞—Å—ã ‚â† 0 ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ YouTube –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ 59:59
            // –ú–æ–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å (–Ω–æ iframe –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç > 1 —á–∞—Å–∞ –≤ —Ç–∞–π–º–∏–Ω–≥–µ?)
            // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –ø–æ–∑–∂–µ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ iframe
            return `${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
        }
    } else if (parts.length === 2) {
        const [m, s] = parts;
        return `${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
    }
    // fallback
    return timeStr;
}