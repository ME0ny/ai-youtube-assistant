// core/utils/parser.js

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ content script –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–±–µ–∑ –ø–æ–¥—Å–≤–µ—Ç–∫–∏).
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è tabId –∏ –ª–æ–≥–æ–≤).
 * @returns {Promise<{status: string, data?: any[], message?: string}>}
 */
export async function parseAllVideoCards(context) {
    const { log, tabId } = context;

    if (typeof tabId !== 'number' || tabId < 0) {
        const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π tabId –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${tabId}`;
        log(`‚ùå ${errorMsg}`, { module: 'Parser', level: 'error' });
        throw new Error(errorMsg);
    }

    log(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...`, { module: 'Parser' });

    try {
        const response = await chrome.tabs.sendMessage(tabId, {
            action: "parseAllVideoCards"
        });

        if (response && response.status === "success") {
            const count = response.data?.length || 0;
            log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${count} –≤–∏–¥–µ–æ.`, { module: 'Parser', level: 'success' });
            return { status: "success", data: response.data };
        } else {
            const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ content script';
            log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç content script: ${errorMsg}`, { module: 'Parser', level: 'error' });
            throw new Error(errorMsg);
        }
    } catch (err) {
        const errorMsg = err.message || '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å content script';
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: ${errorMsg}`, { module: 'Parser', level: 'error' });
        throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    }
}