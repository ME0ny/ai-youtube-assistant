// scenarios/ai-video-recommendation-scenario.js

import { logger } from '../background/background.js';
import { scrollPageNTimes } from '../core/utils/scroller.js';
import { parseAllVideoCards } from '../core/utils/parser.js';
import { formatVideoListForGPT, buildTop10ByTitlePrompt, parseGPTTop10Response } from '../core/utils/ai-utils.js';
import { askGPT } from '../ai/ai-service.js';
import { getProcessedTranscript } from '../ai/transcription-service.js';
import { evaluateVideo } from '../ai/gpt-evaluator.js';
import { getVideoClips, parseClips } from '../ai/clip-generator.js';

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: MM:SS –≤ —Å–µ–∫—É–Ω–¥—ã ---
function timeToSeconds(timeStr) {
    const [minutes, seconds] = timeStr.split(':').map(Number);
    return minutes * 60 + seconds;
}

export const aiVideoRecommendationScenario = {
    id: 'ai-video-recommendation',
    name: 'AI: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É',
    description: '–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: —Å–∫—Ä–æ–ª–ª -> –ø–∞—Ä—Å–∏–Ω–≥ -> GPT-—Ç–æ–ø10 -> —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è -> –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ -> –Ω–∞—Ä–µ–∑–∫–∏ -> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è.',
    async execute(context) {
        const { log, tabId, params, abortSignal } = context;
        const userQuery = params?.userQuery?.trim();

        if (!userQuery) {
            throw new Error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏.");
        }

        log(`üöÄ –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: ${this.name}`, { module: 'AIRecommendationScenario' });
        log(`üìù –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userQuery}"`, { module: 'AIRecommendationScenario' });

        // --- –®–ê–ì 1: –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–∏–∂–¥—ã ---
        log(`üîç –®–∞–≥ 1: –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`, { module: 'AIRecommendationScenario' });
        await scrollPageNTimes(context, 20, 1000, 1000);
        log(`‚úÖ –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à—ë–Ω.`, { module: 'AIRecommendationScenario' });
        await abortSignal();

        // --- –®–ê–ì 2: –°–ø–∞—Ä—Å–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ ---
        log(`üîç –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ –≤–∏–¥–µ–æ...`, { module: 'AIRecommendationScenario' });
        const parseResponse = await parseAllVideoCards(context);
        if (parseResponse?.status !== 'success') {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ: ${parseResponse?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        const allVideos = parseResponse.data;
        log(`‚úÖ –®–∞–≥ 2 –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${allVideos.length}`, { module: 'AIRecommendationScenario' });
        await abortSignal();

        // --- –®–ê–ì 3: GPT ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ---
        log(`üîç –®–∞–≥ 3: GPT ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...`, { module: 'AIRecommendationScenario' });
        const videoList = formatVideoListForGPT(allVideos);
        if (!videoList) {
            throw new Error("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏).");
        }

        const prompt = buildTop10ByTitlePrompt(userQuery, videoList);
        const gptResponse = await askGPT(prompt);
        log(`üìã –û—Ç–≤–µ—Ç –æ—Ç GPT (—Å—ã—Ä–æ–π): ${gptResponse}`, { module: 'AIRecommendationScenario' });
        console.log("[AIRecommendationScenario] –û—Ç–≤–µ—Ç –æ—Ç GPT:", gptResponse);
        const top10Results = parseGPTTop10Response(gptResponse, allVideos);

        log(`‚úÖ –®–∞–≥ 3 –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ø-10: ${top10Results.length}`, { module: 'AIRecommendationScenario' });
        await abortSignal();

        // --- –®–ê–ì 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ç–æ–ø-10 ---
        log(`üîç –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ç–æ–ø-10 –≤–∏–¥–µ–æ...`, { module: 'AIRecommendationScenario' });
        const transcriptResults = [];
        for (const video of top10Results) {
            const { title, videoId } = video;
            log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è: "${title}" (ID: ${videoId})`, { module: 'AIRecommendationScenario' });
            try {
                const chunks = await getProcessedTranscript(videoId);
                transcriptResults.push({ title, videoId, transcript: chunks.map((t, i) => ({ chunk: i + 1, chunk_text: t })) });
                log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è "${title}" –≥–æ—Ç–æ–≤–∞ (${chunks.length} —á–∞–Ω–∫–æ–≤).`, { module: 'AIRecommendationScenario' });
            } catch (err) {
                log(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è "${title}": ${err.message}`, { module: 'AIRecommendationScenario' });
            }
            await abortSignal();
        }
        log(`‚úÖ –®–∞–≥ 4 –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: ${transcriptResults.length}`, { module: 'AIRecommendationScenario' });

        // --- –®–ê–ì 5: GPT ‚Äî –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ ---
        log(`üîç –®–∞–≥ 5: GPT ‚Äî –≥–ª—É–±–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ...`, { module: 'AIRecommendationScenario' });
        const evalResults = [];
        for (const video of transcriptResults) {
            const { title, videoId, transcript } = video;
            log(`üìù –û—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ: "${title}"`, { module: 'AIRecommendationScenario' });
            try {
                const firstChunk = transcript?.[0]?.chunk_text || '';
                const inputForGPT = {
                    title,
                    duration: '00:00', // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º
                    initialScore: 8, // –£—Å–ª–æ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                    transcript: [{ chunk: 1, chunk_text: firstChunk }]
                };
                const { revisedScore, summary } = await evaluateVideo(userQuery, inputForGPT);

                evalResults.push({
                    title,
                    videoId,
                    revisedScore,
                    summary
                });

                log(`‚úÖ –í–∏–¥–µ–æ "${title}" –æ—Ü–µ–Ω–µ–Ω–æ: ${revisedScore}`, { module: 'AIRecommendationScenario' });
            } catch (err) {
                log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è "${title}": ${err.message}`, { module: 'AIRecommendationScenario' });
            }
            await abortSignal();
        }
        log(`‚úÖ –®–∞–≥ 5 –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ü–µ–Ω–æ–∫: ${evalResults.length}`, { module: 'AIRecommendationScenario' });

        // --- –®–ê–ì 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è —Ç–æ–ø-3 –ø–æ –æ—Ü–µ–Ω–∫–µ ---
        log(`üîç –®–∞–≥ 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è —Ç–æ–ø-3 –≤–∏–¥–µ–æ...`, { module: 'AIRecommendationScenario' });
        const top3Eval = [...evalResults].sort((a, b) => b.revisedScore - a.revisedScore).slice(0, 3);

        const clipResults = [];
        for (const video of top3Eval) {
            const { title, videoId, revisedScore } = video;
            log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ: "${title}" (ID: ${videoId})`, { module: 'AIRecommendationScenario' });

            // –ù–∞–π–¥—ë–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
            const videoTranscript = transcriptResults.find(v => v.videoId === videoId);
            if (!videoTranscript) {
                log(`‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ: ${videoId}`, { module: 'AIRecommendationScenario' });
                continue;
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —á–∞–Ω–∫–æ–≤ 1, 3, 6 (0, 2, 5 –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö)
            const chunksToUse = [0, 2, 5].map(i => videoTranscript.transcript[i]?.chunk_text).filter(Boolean);
            const fullTranscript = chunksToUse.join(' ');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
            const gptClipResponse = await getVideoClips(userQuery, fullTranscript);
            console.log("gptClipResponse");
            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const clips = parseClips(gptClipResponse);

            clipResults.push({
                title,
                videoId,
                score: revisedScore,
                clips
            });

            log(`‚úÖ –ù–∞—Ä–µ–∑–∫–∏ –¥–ª—è "${title}" –≥–æ—Ç–æ–≤—ã (${clips.length} —à—Ç.).`, { module: 'AIRecommendationScenario' });
            await abortSignal();
        }
        log(`‚úÖ –®–∞–≥ 6 –∑–∞–≤–µ—Ä—à—ë–Ω. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—Ä–µ–∑–æ–∫: ${clipResults.length}`, { module: 'AIRecommendationScenario' });

        // --- –®–ê–ì 7: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Ä–µ–∑–æ–∫ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è popup) ---
        log(`üîç –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ popup...`, { module: 'AIRecommendationScenario' });

        // –°–æ—Ö—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ chrome.storage.local
        await chrome.storage.local.set({ 'aiScenarioResults': clipResults });

        // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ popup, —á—Ç–æ–±—ã –æ–Ω –æ–±–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        // –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ chrome.runtime.sendMessage, –µ—Å–ª–∏ popup –æ—Ç–∫—Ä—ã—Ç
        // –∏–ª–∏ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ storage, –∫–æ—Ç–æ—Ä–æ–µ popup –º–æ–∂–µ—Ç —Å–ª—É—à–∞—Ç—å
        log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ storage.`, { module: 'AIRecommendationScenario' });

        log(`üéâ –°—Ü–µ–Ω–∞—Ä–∏–π "${this.name}" –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.`, { module: 'AIRecommendationScenario' });
    }
};